[
  {
    "__docId__": 1,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Infinity",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 2,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~NaN",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 3,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~undefined",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 4,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~null",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 5,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 6,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 7,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 8,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 9,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 10,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 11,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Symbol",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 12,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Error",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 13,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~EvalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 14,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~InternalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 15,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RangeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 16,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ReferenceError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 17,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~SyntaxError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 18,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~TypeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 19,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~URIError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 20,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 21,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 22,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Date",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 23,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~String",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 24,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~string",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 25,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RegExp",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 26,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 27,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 28,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 29,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8ClampedArray",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 30,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 31,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 32,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 33,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 34,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 35,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float64Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 36,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Map",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 37,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Set",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 38,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakMap",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 39,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakSet",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 40,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ArrayBuffer",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 41,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~DataView",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 42,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~JSON",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 43,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Promise",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 44,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Generator",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 45,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~GeneratorFunction",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 46,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Reflect",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 47,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Proxy",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 48,
    "kind": "file",
    "name": "src/ast.js",
    "content": "/*\n * Base class for all Fluent AST nodes.\n *\n * All productions described in the ASDL subclass BaseNode, including Span and\n * Annotation.\n *\n */\nexport class BaseNode {\n  constructor() {}\n\n  equals(other, ignoredFields = [\"span\"]) {\n    const thisKeys = new Set(Object.keys(this));\n    const otherKeys = new Set(Object.keys(other));\n    if (ignoredFields) {\n      for (const fieldName of ignoredFields) {\n        thisKeys.delete(fieldName);\n        otherKeys.delete(fieldName);\n      }\n    }\n    if (thisKeys.size !== otherKeys.size) {\n      return false;\n    }\n    for (const fieldName of thisKeys) {\n      if (!otherKeys.has(fieldName)) {\n        return false;\n      }\n      const thisVal = this[fieldName];\n      const otherVal = other[fieldName];\n      if (typeof thisVal !== typeof otherVal) {\n        return false;\n      }\n      if (thisVal instanceof Array) {\n        if (thisVal.length !== otherVal.length) {\n          return false;\n        }\n        for (let i = 0; i < thisVal.length; ++i) {\n          if (!scalarsEqual(thisVal[i], otherVal[i], ignoredFields)) {\n            return false;\n          }\n        }\n      } else if (!scalarsEqual(thisVal, otherVal, ignoredFields)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  clone() {\n    function visit(value) {\n      if (value instanceof BaseNode) {\n        return value.clone();\n      }\n      if (Array.isArray(value)) {\n        return value.map(visit);\n      }\n      return value;\n    }\n    const clone = Object.create(this.constructor.prototype);\n    for (const prop of Object.keys(this)) {\n      clone[prop] = visit(this[prop]);\n    }\n    return clone;\n  }\n}\n\nfunction scalarsEqual(thisVal, otherVal, ignoredFields) {\n  if (thisVal instanceof BaseNode) {\n    return thisVal.equals(otherVal, ignoredFields);\n  }\n  return thisVal === otherVal;\n}\n\n/*\n * Base class for AST nodes which can have Spans.\n */\nclass SyntaxNode extends BaseNode {\n  addSpan(start, end) {\n    this.span = new Span(start, end);\n  }\n}\n\nexport class Resource extends SyntaxNode {\n  constructor(body = []) {\n    super();\n    this.type = \"Resource\";\n    this.body = body;\n  }\n}\n\n/*\n * An abstract base class for useful elements of Resource.body.\n */\nexport class Entry extends SyntaxNode {}\n\nexport class Message extends Entry {\n  constructor(id, value = null, attributes = [], comment = null) {\n    super();\n    this.type = \"Message\";\n    this.id = id;\n    this.value = value;\n    this.attributes = attributes;\n    this.comment = comment;\n  }\n}\n\nexport class Term extends Entry {\n  constructor(id, value, attributes = [], comment = null) {\n    super();\n    this.type = \"Term\";\n    this.id = id;\n    this.value = value;\n    this.attributes = attributes;\n    this.comment = comment;\n  }\n}\n\nexport class Pattern extends SyntaxNode {\n  constructor(elements) {\n    super();\n    this.type = \"Pattern\";\n    this.elements = elements;\n  }\n}\n\n/*\n * An abstract base class for elements of Patterns.\n */\nexport class PatternElement extends SyntaxNode {}\n\nexport class TextElement extends PatternElement {\n  constructor(value) {\n    super();\n    this.type = \"TextElement\";\n    this.value = value;\n  }\n}\n\nexport class Placeable extends PatternElement {\n  constructor(expression) {\n    super();\n    this.type = \"Placeable\";\n    this.expression = expression;\n  }\n}\n\n/*\n * An abstract base class for expressions.\n */\nexport class Expression extends SyntaxNode {}\n\n// An abstract base class for Literals.\nexport class Literal extends Expression {\n  constructor(value) {\n    super();\n    // The \"value\" field contains the exact contents of the literal,\n    // character-for-character.\n    this.value = value;\n  }\n\n  parse() {\n    return {value: this.value};\n  }\n}\n\nexport class StringLiteral extends Literal {\n  constructor(value) {\n    super(value);\n    this.type = \"StringLiteral\";\n  }\n\n  parse() {\n    // Backslash backslash, backslash double quote, uHHHH, UHHHHHH.\n    const KNOWN_ESCAPES =\n      /(?:\\\\\\\\|\\\\\"|\\\\u([0-9a-fA-F]{4})|\\\\U([0-9a-fA-F]{6}))/g;\n\n    function from_escape_sequence(match, codepoint4, codepoint6) {\n      switch (match) {\n        case \"\\\\\\\\\":\n          return \"\\\\\";\n        case \"\\\\\\\"\":\n          return \"\\\"\";\n        default:\n          let codepoint = parseInt(codepoint4 || codepoint6, 16);\n          if (codepoint <= 0xD7FF || 0xE000 <= codepoint) {\n            // It's a Unicode scalar value.\n            return String.fromCodePoint(codepoint);\n          }\n          // Escape sequences reresenting surrogate code points are\n          // well-formed but invalid in Fluent. Replace them with U+FFFD\n          // REPLACEMENT CHARACTER.\n          return \"�\";\n      }\n    }\n\n    let value = this.value.replace(KNOWN_ESCAPES, from_escape_sequence);\n    return {value};\n  }\n}\n\nexport class NumberLiteral extends Literal {\n  constructor(value) {\n    super(value);\n    this.type = \"NumberLiteral\";\n  }\n\n  parse() {\n    let value = parseFloat(this.value);\n    let decimal_position = this.value.indexOf(\".\");\n    let precision = decimal_position > 0\n      ? this.value.length - decimal_position - 1\n      : 0;\n    return {value, precision};\n  }\n}\n\nexport class MessageReference extends Expression {\n  constructor(id, attribute = null) {\n    super();\n    this.type = \"MessageReference\";\n    this.id = id;\n    this.attribute = attribute;\n  }\n}\n\nexport class TermReference extends Expression {\n  constructor(id, attribute = null, args = null) {\n    super();\n    this.type = \"TermReference\";\n    this.id = id;\n    this.attribute = attribute;\n    this.arguments = args;\n  }\n}\n\nexport class VariableReference extends Expression {\n  constructor(id) {\n    super();\n    this.type = \"VariableReference\";\n    this.id = id;\n  }\n}\n\nexport class FunctionReference extends Expression {\n  constructor(id, args) {\n    super();\n    this.type = \"FunctionReference\";\n    this.id = id;\n    this.arguments = args;\n  }\n}\n\nexport class SelectExpression extends Expression {\n  constructor(selector, variants) {\n    super();\n    this.type = \"SelectExpression\";\n    this.selector = selector;\n    this.variants = variants;\n  }\n}\n\nexport class CallArguments extends SyntaxNode {\n  constructor(positional = [], named = []) {\n    super();\n    this.type = \"CallArguments\";\n    this.positional = positional;\n    this.named = named;\n  }\n}\n\nexport class Attribute extends SyntaxNode {\n  constructor(id, value) {\n    super();\n    this.type = \"Attribute\";\n    this.id = id;\n    this.value = value;\n  }\n}\n\nexport class Variant extends SyntaxNode {\n  constructor(key, value, def = false) {\n    super();\n    this.type = \"Variant\";\n    this.key = key;\n    this.value = value;\n    this.default = def;\n  }\n}\n\nexport class NamedArgument extends SyntaxNode {\n  constructor(name, value) {\n    super();\n    this.type = \"NamedArgument\";\n    this.name = name;\n    this.value = value;\n  }\n}\n\nexport class Identifier extends SyntaxNode {\n  constructor(name) {\n    super();\n    this.type = \"Identifier\";\n    this.name = name;\n  }\n}\n\nexport class BaseComment extends Entry {\n  constructor(content) {\n    super();\n    this.type = \"BaseComment\";\n    this.content = content;\n  }\n}\n\nexport class Comment extends BaseComment {\n  constructor(content) {\n    super(content);\n    this.type = \"Comment\";\n  }\n}\n\nexport class GroupComment extends BaseComment {\n  constructor(content) {\n    super(content);\n    this.type = \"GroupComment\";\n  }\n}\nexport class ResourceComment extends BaseComment {\n  constructor(content) {\n    super(content);\n    this.type = \"ResourceComment\";\n  }\n}\n\nexport class Junk extends SyntaxNode {\n  constructor(content) {\n    super();\n    this.type = \"Junk\";\n    this.annotations = [];\n    this.content = content;\n  }\n\n  addAnnotation(annot) {\n    this.annotations.push(annot);\n  }\n}\n\nexport class Span extends BaseNode {\n  constructor(start, end) {\n    super();\n    this.type = \"Span\";\n    this.start = start;\n    this.end = end;\n  }\n}\n\nexport class Annotation extends SyntaxNode {\n  constructor(code, args = [], message) {\n    super();\n    this.type = \"Annotation\";\n    this.code = code;\n    this.arguments = args;\n    this.message = message;\n  }\n}\n",
    "static": true,
    "longname": "/c/Users/stas/Mozilla/fluent/fluent.js/fluent-syntax/src/ast.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 49,
    "kind": "class",
    "name": "BaseNode",
    "memberof": "src/ast.js",
    "static": true,
    "longname": "src/ast.js~BaseNode",
    "access": "public",
    "export": true,
    "importPath": "@fluent/syntax/src/ast.js",
    "importStyle": "{BaseNode}",
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 50,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/ast.js~BaseNode",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/ast.js~BaseNode#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 9,
    "undocument": true
  },
  {
    "__docId__": 51,
    "kind": "method",
    "name": "equals",
    "memberof": "src/ast.js~BaseNode",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/ast.js~BaseNode#equals",
    "access": "public",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "params": [
      {
        "name": "other",
        "types": [
          "*"
        ]
      },
      {
        "name": "ignoredFields",
        "optional": true,
        "types": [
          "string[]"
        ],
        "defaultRaw": [
          "span"
        ],
        "defaultValue": "[\"span\"]"
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 52,
    "kind": "method",
    "name": "clone",
    "memberof": "src/ast.js~BaseNode",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/ast.js~BaseNode#clone",
    "access": "public",
    "description": null,
    "lineNumber": 48,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 53,
    "kind": "function",
    "name": "scalarsEqual",
    "memberof": "src/ast.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/ast.js~scalarsEqual",
    "access": "public",
    "export": false,
    "importPath": "@fluent/syntax/src/ast.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 66,
    "undocument": true,
    "params": [
      {
        "name": "thisVal",
        "types": [
          "*"
        ]
      },
      {
        "name": "otherVal",
        "types": [
          "*"
        ]
      },
      {
        "name": "ignoredFields",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 54,
    "kind": "class",
    "name": "SyntaxNode",
    "memberof": "src/ast.js",
    "static": true,
    "longname": "src/ast.js~SyntaxNode",
    "access": "public",
    "export": false,
    "importPath": "@fluent/syntax/src/ast.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 76,
    "undocument": true,
    "interface": false,
    "extends": [
      "BaseNode"
    ],
    "ignore": true
  },
  {
    "__docId__": 55,
    "kind": "method",
    "name": "addSpan",
    "memberof": "src/ast.js~SyntaxNode",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/ast.js~SyntaxNode#addSpan",
    "access": "public",
    "description": null,
    "lineNumber": 77,
    "undocument": true,
    "params": [
      {
        "name": "start",
        "types": [
          "*"
        ]
      },
      {
        "name": "end",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 56,
    "kind": "member",
    "name": "span",
    "memberof": "src/ast.js~SyntaxNode",
    "static": false,
    "longname": "src/ast.js~SyntaxNode#span",
    "access": "public",
    "description": null,
    "lineNumber": 78,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 57,
    "kind": "class",
    "name": "Resource",
    "memberof": "src/ast.js",
    "static": true,
    "longname": "src/ast.js~Resource",
    "access": "public",
    "export": true,
    "importPath": "@fluent/syntax/src/ast.js",
    "importStyle": "{Resource}",
    "description": null,
    "lineNumber": 82,
    "undocument": true,
    "interface": false,
    "extends": [
      "SyntaxNode"
    ]
  },
  {
    "__docId__": 58,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/ast.js~Resource",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/ast.js~Resource#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 83,
    "undocument": true
  },
  {
    "__docId__": 59,
    "kind": "member",
    "name": "type",
    "memberof": "src/ast.js~Resource",
    "static": false,
    "longname": "src/ast.js~Resource#type",
    "access": "public",
    "description": null,
    "lineNumber": 85,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 60,
    "kind": "member",
    "name": "body",
    "memberof": "src/ast.js~Resource",
    "static": false,
    "longname": "src/ast.js~Resource#body",
    "access": "public",
    "description": null,
    "lineNumber": 86,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 61,
    "kind": "class",
    "name": "Entry",
    "memberof": "src/ast.js",
    "static": true,
    "longname": "src/ast.js~Entry",
    "access": "public",
    "export": true,
    "importPath": "@fluent/syntax/src/ast.js",
    "importStyle": "{Entry}",
    "description": null,
    "lineNumber": 93,
    "undocument": true,
    "interface": false,
    "extends": [
      "SyntaxNode"
    ]
  },
  {
    "__docId__": 62,
    "kind": "class",
    "name": "Message",
    "memberof": "src/ast.js",
    "static": true,
    "longname": "src/ast.js~Message",
    "access": "public",
    "export": true,
    "importPath": "@fluent/syntax/src/ast.js",
    "importStyle": "{Message}",
    "description": null,
    "lineNumber": 95,
    "undocument": true,
    "interface": false,
    "extends": [
      "Entry"
    ]
  },
  {
    "__docId__": 63,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/ast.js~Message",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/ast.js~Message#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 96,
    "undocument": true
  },
  {
    "__docId__": 64,
    "kind": "member",
    "name": "type",
    "memberof": "src/ast.js~Message",
    "static": false,
    "longname": "src/ast.js~Message#type",
    "access": "public",
    "description": null,
    "lineNumber": 98,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 65,
    "kind": "member",
    "name": "id",
    "memberof": "src/ast.js~Message",
    "static": false,
    "longname": "src/ast.js~Message#id",
    "access": "public",
    "description": null,
    "lineNumber": 99,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 66,
    "kind": "member",
    "name": "value",
    "memberof": "src/ast.js~Message",
    "static": false,
    "longname": "src/ast.js~Message#value",
    "access": "public",
    "description": null,
    "lineNumber": 100,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 67,
    "kind": "member",
    "name": "attributes",
    "memberof": "src/ast.js~Message",
    "static": false,
    "longname": "src/ast.js~Message#attributes",
    "access": "public",
    "description": null,
    "lineNumber": 101,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 68,
    "kind": "member",
    "name": "comment",
    "memberof": "src/ast.js~Message",
    "static": false,
    "longname": "src/ast.js~Message#comment",
    "access": "public",
    "description": null,
    "lineNumber": 102,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 69,
    "kind": "class",
    "name": "Term",
    "memberof": "src/ast.js",
    "static": true,
    "longname": "src/ast.js~Term",
    "access": "public",
    "export": true,
    "importPath": "@fluent/syntax/src/ast.js",
    "importStyle": "{Term}",
    "description": null,
    "lineNumber": 106,
    "undocument": true,
    "interface": false,
    "extends": [
      "Entry"
    ]
  },
  {
    "__docId__": 70,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/ast.js~Term",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/ast.js~Term#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 107,
    "undocument": true
  },
  {
    "__docId__": 71,
    "kind": "member",
    "name": "type",
    "memberof": "src/ast.js~Term",
    "static": false,
    "longname": "src/ast.js~Term#type",
    "access": "public",
    "description": null,
    "lineNumber": 109,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 72,
    "kind": "member",
    "name": "id",
    "memberof": "src/ast.js~Term",
    "static": false,
    "longname": "src/ast.js~Term#id",
    "access": "public",
    "description": null,
    "lineNumber": 110,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 73,
    "kind": "member",
    "name": "value",
    "memberof": "src/ast.js~Term",
    "static": false,
    "longname": "src/ast.js~Term#value",
    "access": "public",
    "description": null,
    "lineNumber": 111,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 74,
    "kind": "member",
    "name": "attributes",
    "memberof": "src/ast.js~Term",
    "static": false,
    "longname": "src/ast.js~Term#attributes",
    "access": "public",
    "description": null,
    "lineNumber": 112,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 75,
    "kind": "member",
    "name": "comment",
    "memberof": "src/ast.js~Term",
    "static": false,
    "longname": "src/ast.js~Term#comment",
    "access": "public",
    "description": null,
    "lineNumber": 113,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 76,
    "kind": "class",
    "name": "Pattern",
    "memberof": "src/ast.js",
    "static": true,
    "longname": "src/ast.js~Pattern",
    "access": "public",
    "export": true,
    "importPath": "@fluent/syntax/src/ast.js",
    "importStyle": "{Pattern}",
    "description": null,
    "lineNumber": 117,
    "undocument": true,
    "interface": false,
    "extends": [
      "SyntaxNode"
    ]
  },
  {
    "__docId__": 77,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/ast.js~Pattern",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/ast.js~Pattern#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 118,
    "undocument": true
  },
  {
    "__docId__": 78,
    "kind": "member",
    "name": "type",
    "memberof": "src/ast.js~Pattern",
    "static": false,
    "longname": "src/ast.js~Pattern#type",
    "access": "public",
    "description": null,
    "lineNumber": 120,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 79,
    "kind": "member",
    "name": "elements",
    "memberof": "src/ast.js~Pattern",
    "static": false,
    "longname": "src/ast.js~Pattern#elements",
    "access": "public",
    "description": null,
    "lineNumber": 121,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 80,
    "kind": "class",
    "name": "PatternElement",
    "memberof": "src/ast.js",
    "static": true,
    "longname": "src/ast.js~PatternElement",
    "access": "public",
    "export": true,
    "importPath": "@fluent/syntax/src/ast.js",
    "importStyle": "{PatternElement}",
    "description": null,
    "lineNumber": 128,
    "undocument": true,
    "interface": false,
    "extends": [
      "SyntaxNode"
    ]
  },
  {
    "__docId__": 81,
    "kind": "class",
    "name": "TextElement",
    "memberof": "src/ast.js",
    "static": true,
    "longname": "src/ast.js~TextElement",
    "access": "public",
    "export": true,
    "importPath": "@fluent/syntax/src/ast.js",
    "importStyle": "{TextElement}",
    "description": null,
    "lineNumber": 130,
    "undocument": true,
    "interface": false,
    "extends": [
      "PatternElement"
    ]
  },
  {
    "__docId__": 82,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/ast.js~TextElement",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/ast.js~TextElement#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 131,
    "undocument": true
  },
  {
    "__docId__": 83,
    "kind": "member",
    "name": "type",
    "memberof": "src/ast.js~TextElement",
    "static": false,
    "longname": "src/ast.js~TextElement#type",
    "access": "public",
    "description": null,
    "lineNumber": 133,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 84,
    "kind": "member",
    "name": "value",
    "memberof": "src/ast.js~TextElement",
    "static": false,
    "longname": "src/ast.js~TextElement#value",
    "access": "public",
    "description": null,
    "lineNumber": 134,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 85,
    "kind": "class",
    "name": "Placeable",
    "memberof": "src/ast.js",
    "static": true,
    "longname": "src/ast.js~Placeable",
    "access": "public",
    "export": true,
    "importPath": "@fluent/syntax/src/ast.js",
    "importStyle": "{Placeable}",
    "description": null,
    "lineNumber": 138,
    "undocument": true,
    "interface": false,
    "extends": [
      "PatternElement"
    ]
  },
  {
    "__docId__": 86,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/ast.js~Placeable",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/ast.js~Placeable#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 139,
    "undocument": true
  },
  {
    "__docId__": 87,
    "kind": "member",
    "name": "type",
    "memberof": "src/ast.js~Placeable",
    "static": false,
    "longname": "src/ast.js~Placeable#type",
    "access": "public",
    "description": null,
    "lineNumber": 141,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 88,
    "kind": "member",
    "name": "expression",
    "memberof": "src/ast.js~Placeable",
    "static": false,
    "longname": "src/ast.js~Placeable#expression",
    "access": "public",
    "description": null,
    "lineNumber": 142,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 89,
    "kind": "class",
    "name": "Expression",
    "memberof": "src/ast.js",
    "static": true,
    "longname": "src/ast.js~Expression",
    "access": "public",
    "export": true,
    "importPath": "@fluent/syntax/src/ast.js",
    "importStyle": "{Expression}",
    "description": null,
    "lineNumber": 149,
    "undocument": true,
    "interface": false,
    "extends": [
      "SyntaxNode"
    ]
  },
  {
    "__docId__": 90,
    "kind": "class",
    "name": "Literal",
    "memberof": "src/ast.js",
    "static": true,
    "longname": "src/ast.js~Literal",
    "access": "public",
    "export": true,
    "importPath": "@fluent/syntax/src/ast.js",
    "importStyle": "{Literal}",
    "description": null,
    "lineNumber": 152,
    "undocument": true,
    "interface": false,
    "extends": [
      "Expression"
    ]
  },
  {
    "__docId__": 91,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/ast.js~Literal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/ast.js~Literal#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 153,
    "undocument": true
  },
  {
    "__docId__": 92,
    "kind": "member",
    "name": "value",
    "memberof": "src/ast.js~Literal",
    "static": false,
    "longname": "src/ast.js~Literal#value",
    "access": "public",
    "description": null,
    "lineNumber": 157,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 93,
    "kind": "method",
    "name": "parse",
    "memberof": "src/ast.js~Literal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/ast.js~Literal#parse",
    "access": "public",
    "description": null,
    "lineNumber": 160,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "{\"value\": *}"
      ]
    }
  },
  {
    "__docId__": 94,
    "kind": "class",
    "name": "StringLiteral",
    "memberof": "src/ast.js",
    "static": true,
    "longname": "src/ast.js~StringLiteral",
    "access": "public",
    "export": true,
    "importPath": "@fluent/syntax/src/ast.js",
    "importStyle": "{StringLiteral}",
    "description": null,
    "lineNumber": 165,
    "undocument": true,
    "interface": false,
    "extends": [
      "Literal"
    ]
  },
  {
    "__docId__": 95,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/ast.js~StringLiteral",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/ast.js~StringLiteral#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 166,
    "undocument": true
  },
  {
    "__docId__": 96,
    "kind": "member",
    "name": "type",
    "memberof": "src/ast.js~StringLiteral",
    "static": false,
    "longname": "src/ast.js~StringLiteral#type",
    "access": "public",
    "description": null,
    "lineNumber": 168,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 97,
    "kind": "method",
    "name": "parse",
    "memberof": "src/ast.js~StringLiteral",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/ast.js~StringLiteral#parse",
    "access": "public",
    "description": null,
    "lineNumber": 171,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "{\"value\": *}"
      ]
    }
  },
  {
    "__docId__": 98,
    "kind": "class",
    "name": "NumberLiteral",
    "memberof": "src/ast.js",
    "static": true,
    "longname": "src/ast.js~NumberLiteral",
    "access": "public",
    "export": true,
    "importPath": "@fluent/syntax/src/ast.js",
    "importStyle": "{NumberLiteral}",
    "description": null,
    "lineNumber": 200,
    "undocument": true,
    "interface": false,
    "extends": [
      "Literal"
    ]
  },
  {
    "__docId__": 99,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/ast.js~NumberLiteral",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/ast.js~NumberLiteral#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 201,
    "undocument": true
  },
  {
    "__docId__": 100,
    "kind": "member",
    "name": "type",
    "memberof": "src/ast.js~NumberLiteral",
    "static": false,
    "longname": "src/ast.js~NumberLiteral#type",
    "access": "public",
    "description": null,
    "lineNumber": 203,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 101,
    "kind": "method",
    "name": "parse",
    "memberof": "src/ast.js~NumberLiteral",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/ast.js~NumberLiteral#parse",
    "access": "public",
    "description": null,
    "lineNumber": 206,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "{\"value\": *, \"precision\": *}"
      ]
    }
  },
  {
    "__docId__": 102,
    "kind": "class",
    "name": "MessageReference",
    "memberof": "src/ast.js",
    "static": true,
    "longname": "src/ast.js~MessageReference",
    "access": "public",
    "export": true,
    "importPath": "@fluent/syntax/src/ast.js",
    "importStyle": "{MessageReference}",
    "description": null,
    "lineNumber": 216,
    "undocument": true,
    "interface": false,
    "extends": [
      "Expression"
    ]
  },
  {
    "__docId__": 103,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/ast.js~MessageReference",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/ast.js~MessageReference#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 217,
    "undocument": true
  },
  {
    "__docId__": 104,
    "kind": "member",
    "name": "type",
    "memberof": "src/ast.js~MessageReference",
    "static": false,
    "longname": "src/ast.js~MessageReference#type",
    "access": "public",
    "description": null,
    "lineNumber": 219,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 105,
    "kind": "member",
    "name": "id",
    "memberof": "src/ast.js~MessageReference",
    "static": false,
    "longname": "src/ast.js~MessageReference#id",
    "access": "public",
    "description": null,
    "lineNumber": 220,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 106,
    "kind": "member",
    "name": "attribute",
    "memberof": "src/ast.js~MessageReference",
    "static": false,
    "longname": "src/ast.js~MessageReference#attribute",
    "access": "public",
    "description": null,
    "lineNumber": 221,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 107,
    "kind": "class",
    "name": "TermReference",
    "memberof": "src/ast.js",
    "static": true,
    "longname": "src/ast.js~TermReference",
    "access": "public",
    "export": true,
    "importPath": "@fluent/syntax/src/ast.js",
    "importStyle": "{TermReference}",
    "description": null,
    "lineNumber": 225,
    "undocument": true,
    "interface": false,
    "extends": [
      "Expression"
    ]
  },
  {
    "__docId__": 108,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/ast.js~TermReference",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/ast.js~TermReference#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 226,
    "undocument": true
  },
  {
    "__docId__": 109,
    "kind": "member",
    "name": "type",
    "memberof": "src/ast.js~TermReference",
    "static": false,
    "longname": "src/ast.js~TermReference#type",
    "access": "public",
    "description": null,
    "lineNumber": 228,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 110,
    "kind": "member",
    "name": "id",
    "memberof": "src/ast.js~TermReference",
    "static": false,
    "longname": "src/ast.js~TermReference#id",
    "access": "public",
    "description": null,
    "lineNumber": 229,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 111,
    "kind": "member",
    "name": "attribute",
    "memberof": "src/ast.js~TermReference",
    "static": false,
    "longname": "src/ast.js~TermReference#attribute",
    "access": "public",
    "description": null,
    "lineNumber": 230,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 112,
    "kind": "member",
    "name": "arguments",
    "memberof": "src/ast.js~TermReference",
    "static": false,
    "longname": "src/ast.js~TermReference#arguments",
    "access": "public",
    "description": null,
    "lineNumber": 231,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 113,
    "kind": "class",
    "name": "VariableReference",
    "memberof": "src/ast.js",
    "static": true,
    "longname": "src/ast.js~VariableReference",
    "access": "public",
    "export": true,
    "importPath": "@fluent/syntax/src/ast.js",
    "importStyle": "{VariableReference}",
    "description": null,
    "lineNumber": 235,
    "undocument": true,
    "interface": false,
    "extends": [
      "Expression"
    ]
  },
  {
    "__docId__": 114,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/ast.js~VariableReference",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/ast.js~VariableReference#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 236,
    "undocument": true
  },
  {
    "__docId__": 115,
    "kind": "member",
    "name": "type",
    "memberof": "src/ast.js~VariableReference",
    "static": false,
    "longname": "src/ast.js~VariableReference#type",
    "access": "public",
    "description": null,
    "lineNumber": 238,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 116,
    "kind": "member",
    "name": "id",
    "memberof": "src/ast.js~VariableReference",
    "static": false,
    "longname": "src/ast.js~VariableReference#id",
    "access": "public",
    "description": null,
    "lineNumber": 239,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 117,
    "kind": "class",
    "name": "FunctionReference",
    "memberof": "src/ast.js",
    "static": true,
    "longname": "src/ast.js~FunctionReference",
    "access": "public",
    "export": true,
    "importPath": "@fluent/syntax/src/ast.js",
    "importStyle": "{FunctionReference}",
    "description": null,
    "lineNumber": 243,
    "undocument": true,
    "interface": false,
    "extends": [
      "Expression"
    ]
  },
  {
    "__docId__": 118,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/ast.js~FunctionReference",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/ast.js~FunctionReference#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 244,
    "undocument": true
  },
  {
    "__docId__": 119,
    "kind": "member",
    "name": "type",
    "memberof": "src/ast.js~FunctionReference",
    "static": false,
    "longname": "src/ast.js~FunctionReference#type",
    "access": "public",
    "description": null,
    "lineNumber": 246,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 120,
    "kind": "member",
    "name": "id",
    "memberof": "src/ast.js~FunctionReference",
    "static": false,
    "longname": "src/ast.js~FunctionReference#id",
    "access": "public",
    "description": null,
    "lineNumber": 247,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 121,
    "kind": "member",
    "name": "arguments",
    "memberof": "src/ast.js~FunctionReference",
    "static": false,
    "longname": "src/ast.js~FunctionReference#arguments",
    "access": "public",
    "description": null,
    "lineNumber": 248,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 122,
    "kind": "class",
    "name": "SelectExpression",
    "memberof": "src/ast.js",
    "static": true,
    "longname": "src/ast.js~SelectExpression",
    "access": "public",
    "export": true,
    "importPath": "@fluent/syntax/src/ast.js",
    "importStyle": "{SelectExpression}",
    "description": null,
    "lineNumber": 252,
    "undocument": true,
    "interface": false,
    "extends": [
      "Expression"
    ]
  },
  {
    "__docId__": 123,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/ast.js~SelectExpression",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/ast.js~SelectExpression#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 253,
    "undocument": true
  },
  {
    "__docId__": 124,
    "kind": "member",
    "name": "type",
    "memberof": "src/ast.js~SelectExpression",
    "static": false,
    "longname": "src/ast.js~SelectExpression#type",
    "access": "public",
    "description": null,
    "lineNumber": 255,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 125,
    "kind": "member",
    "name": "selector",
    "memberof": "src/ast.js~SelectExpression",
    "static": false,
    "longname": "src/ast.js~SelectExpression#selector",
    "access": "public",
    "description": null,
    "lineNumber": 256,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 126,
    "kind": "member",
    "name": "variants",
    "memberof": "src/ast.js~SelectExpression",
    "static": false,
    "longname": "src/ast.js~SelectExpression#variants",
    "access": "public",
    "description": null,
    "lineNumber": 257,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 127,
    "kind": "class",
    "name": "CallArguments",
    "memberof": "src/ast.js",
    "static": true,
    "longname": "src/ast.js~CallArguments",
    "access": "public",
    "export": true,
    "importPath": "@fluent/syntax/src/ast.js",
    "importStyle": "{CallArguments}",
    "description": null,
    "lineNumber": 261,
    "undocument": true,
    "interface": false,
    "extends": [
      "SyntaxNode"
    ]
  },
  {
    "__docId__": 128,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/ast.js~CallArguments",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/ast.js~CallArguments#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 262,
    "undocument": true
  },
  {
    "__docId__": 129,
    "kind": "member",
    "name": "type",
    "memberof": "src/ast.js~CallArguments",
    "static": false,
    "longname": "src/ast.js~CallArguments#type",
    "access": "public",
    "description": null,
    "lineNumber": 264,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 130,
    "kind": "member",
    "name": "positional",
    "memberof": "src/ast.js~CallArguments",
    "static": false,
    "longname": "src/ast.js~CallArguments#positional",
    "access": "public",
    "description": null,
    "lineNumber": 265,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 131,
    "kind": "member",
    "name": "named",
    "memberof": "src/ast.js~CallArguments",
    "static": false,
    "longname": "src/ast.js~CallArguments#named",
    "access": "public",
    "description": null,
    "lineNumber": 266,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 132,
    "kind": "class",
    "name": "Attribute",
    "memberof": "src/ast.js",
    "static": true,
    "longname": "src/ast.js~Attribute",
    "access": "public",
    "export": true,
    "importPath": "@fluent/syntax/src/ast.js",
    "importStyle": "{Attribute}",
    "description": null,
    "lineNumber": 270,
    "undocument": true,
    "interface": false,
    "extends": [
      "SyntaxNode"
    ]
  },
  {
    "__docId__": 133,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/ast.js~Attribute",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/ast.js~Attribute#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 271,
    "undocument": true
  },
  {
    "__docId__": 134,
    "kind": "member",
    "name": "type",
    "memberof": "src/ast.js~Attribute",
    "static": false,
    "longname": "src/ast.js~Attribute#type",
    "access": "public",
    "description": null,
    "lineNumber": 273,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 135,
    "kind": "member",
    "name": "id",
    "memberof": "src/ast.js~Attribute",
    "static": false,
    "longname": "src/ast.js~Attribute#id",
    "access": "public",
    "description": null,
    "lineNumber": 274,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 136,
    "kind": "member",
    "name": "value",
    "memberof": "src/ast.js~Attribute",
    "static": false,
    "longname": "src/ast.js~Attribute#value",
    "access": "public",
    "description": null,
    "lineNumber": 275,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 137,
    "kind": "class",
    "name": "Variant",
    "memberof": "src/ast.js",
    "static": true,
    "longname": "src/ast.js~Variant",
    "access": "public",
    "export": true,
    "importPath": "@fluent/syntax/src/ast.js",
    "importStyle": "{Variant}",
    "description": null,
    "lineNumber": 279,
    "undocument": true,
    "interface": false,
    "extends": [
      "SyntaxNode"
    ]
  },
  {
    "__docId__": 138,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/ast.js~Variant",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/ast.js~Variant#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 280,
    "undocument": true
  },
  {
    "__docId__": 139,
    "kind": "member",
    "name": "type",
    "memberof": "src/ast.js~Variant",
    "static": false,
    "longname": "src/ast.js~Variant#type",
    "access": "public",
    "description": null,
    "lineNumber": 282,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 140,
    "kind": "member",
    "name": "key",
    "memberof": "src/ast.js~Variant",
    "static": false,
    "longname": "src/ast.js~Variant#key",
    "access": "public",
    "description": null,
    "lineNumber": 283,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 141,
    "kind": "member",
    "name": "value",
    "memberof": "src/ast.js~Variant",
    "static": false,
    "longname": "src/ast.js~Variant#value",
    "access": "public",
    "description": null,
    "lineNumber": 284,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 142,
    "kind": "member",
    "name": "default",
    "memberof": "src/ast.js~Variant",
    "static": false,
    "longname": "src/ast.js~Variant#default",
    "access": "public",
    "description": null,
    "lineNumber": 285,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 143,
    "kind": "class",
    "name": "NamedArgument",
    "memberof": "src/ast.js",
    "static": true,
    "longname": "src/ast.js~NamedArgument",
    "access": "public",
    "export": true,
    "importPath": "@fluent/syntax/src/ast.js",
    "importStyle": "{NamedArgument}",
    "description": null,
    "lineNumber": 289,
    "undocument": true,
    "interface": false,
    "extends": [
      "SyntaxNode"
    ]
  },
  {
    "__docId__": 144,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/ast.js~NamedArgument",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/ast.js~NamedArgument#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 290,
    "undocument": true
  },
  {
    "__docId__": 145,
    "kind": "member",
    "name": "type",
    "memberof": "src/ast.js~NamedArgument",
    "static": false,
    "longname": "src/ast.js~NamedArgument#type",
    "access": "public",
    "description": null,
    "lineNumber": 292,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 146,
    "kind": "member",
    "name": "name",
    "memberof": "src/ast.js~NamedArgument",
    "static": false,
    "longname": "src/ast.js~NamedArgument#name",
    "access": "public",
    "description": null,
    "lineNumber": 293,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 147,
    "kind": "member",
    "name": "value",
    "memberof": "src/ast.js~NamedArgument",
    "static": false,
    "longname": "src/ast.js~NamedArgument#value",
    "access": "public",
    "description": null,
    "lineNumber": 294,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 148,
    "kind": "class",
    "name": "Identifier",
    "memberof": "src/ast.js",
    "static": true,
    "longname": "src/ast.js~Identifier",
    "access": "public",
    "export": true,
    "importPath": "@fluent/syntax/src/ast.js",
    "importStyle": "{Identifier}",
    "description": null,
    "lineNumber": 298,
    "undocument": true,
    "interface": false,
    "extends": [
      "SyntaxNode"
    ]
  },
  {
    "__docId__": 149,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/ast.js~Identifier",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/ast.js~Identifier#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 299,
    "undocument": true
  },
  {
    "__docId__": 150,
    "kind": "member",
    "name": "type",
    "memberof": "src/ast.js~Identifier",
    "static": false,
    "longname": "src/ast.js~Identifier#type",
    "access": "public",
    "description": null,
    "lineNumber": 301,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 151,
    "kind": "member",
    "name": "name",
    "memberof": "src/ast.js~Identifier",
    "static": false,
    "longname": "src/ast.js~Identifier#name",
    "access": "public",
    "description": null,
    "lineNumber": 302,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 152,
    "kind": "class",
    "name": "BaseComment",
    "memberof": "src/ast.js",
    "static": true,
    "longname": "src/ast.js~BaseComment",
    "access": "public",
    "export": true,
    "importPath": "@fluent/syntax/src/ast.js",
    "importStyle": "{BaseComment}",
    "description": null,
    "lineNumber": 306,
    "undocument": true,
    "interface": false,
    "extends": [
      "Entry"
    ]
  },
  {
    "__docId__": 153,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/ast.js~BaseComment",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/ast.js~BaseComment#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 307,
    "undocument": true
  },
  {
    "__docId__": 154,
    "kind": "member",
    "name": "type",
    "memberof": "src/ast.js~BaseComment",
    "static": false,
    "longname": "src/ast.js~BaseComment#type",
    "access": "public",
    "description": null,
    "lineNumber": 309,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 155,
    "kind": "member",
    "name": "content",
    "memberof": "src/ast.js~BaseComment",
    "static": false,
    "longname": "src/ast.js~BaseComment#content",
    "access": "public",
    "description": null,
    "lineNumber": 310,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 156,
    "kind": "class",
    "name": "Comment",
    "memberof": "src/ast.js",
    "static": true,
    "longname": "src/ast.js~Comment",
    "access": "public",
    "export": true,
    "importPath": "@fluent/syntax/src/ast.js",
    "importStyle": "{Comment}",
    "description": null,
    "lineNumber": 314,
    "undocument": true,
    "interface": false,
    "extends": [
      "BaseComment"
    ]
  },
  {
    "__docId__": 157,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/ast.js~Comment",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/ast.js~Comment#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 315,
    "undocument": true
  },
  {
    "__docId__": 158,
    "kind": "member",
    "name": "type",
    "memberof": "src/ast.js~Comment",
    "static": false,
    "longname": "src/ast.js~Comment#type",
    "access": "public",
    "description": null,
    "lineNumber": 317,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 159,
    "kind": "class",
    "name": "GroupComment",
    "memberof": "src/ast.js",
    "static": true,
    "longname": "src/ast.js~GroupComment",
    "access": "public",
    "export": true,
    "importPath": "@fluent/syntax/src/ast.js",
    "importStyle": "{GroupComment}",
    "description": null,
    "lineNumber": 321,
    "undocument": true,
    "interface": false,
    "extends": [
      "BaseComment"
    ]
  },
  {
    "__docId__": 160,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/ast.js~GroupComment",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/ast.js~GroupComment#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 322,
    "undocument": true
  },
  {
    "__docId__": 161,
    "kind": "member",
    "name": "type",
    "memberof": "src/ast.js~GroupComment",
    "static": false,
    "longname": "src/ast.js~GroupComment#type",
    "access": "public",
    "description": null,
    "lineNumber": 324,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 162,
    "kind": "class",
    "name": "ResourceComment",
    "memberof": "src/ast.js",
    "static": true,
    "longname": "src/ast.js~ResourceComment",
    "access": "public",
    "export": true,
    "importPath": "@fluent/syntax/src/ast.js",
    "importStyle": "{ResourceComment}",
    "description": null,
    "lineNumber": 327,
    "undocument": true,
    "interface": false,
    "extends": [
      "BaseComment"
    ]
  },
  {
    "__docId__": 163,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/ast.js~ResourceComment",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/ast.js~ResourceComment#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 328,
    "undocument": true
  },
  {
    "__docId__": 164,
    "kind": "member",
    "name": "type",
    "memberof": "src/ast.js~ResourceComment",
    "static": false,
    "longname": "src/ast.js~ResourceComment#type",
    "access": "public",
    "description": null,
    "lineNumber": 330,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 165,
    "kind": "class",
    "name": "Junk",
    "memberof": "src/ast.js",
    "static": true,
    "longname": "src/ast.js~Junk",
    "access": "public",
    "export": true,
    "importPath": "@fluent/syntax/src/ast.js",
    "importStyle": "{Junk}",
    "description": null,
    "lineNumber": 334,
    "undocument": true,
    "interface": false,
    "extends": [
      "SyntaxNode"
    ]
  },
  {
    "__docId__": 166,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/ast.js~Junk",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/ast.js~Junk#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 335,
    "undocument": true
  },
  {
    "__docId__": 167,
    "kind": "member",
    "name": "type",
    "memberof": "src/ast.js~Junk",
    "static": false,
    "longname": "src/ast.js~Junk#type",
    "access": "public",
    "description": null,
    "lineNumber": 337,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 168,
    "kind": "member",
    "name": "annotations",
    "memberof": "src/ast.js~Junk",
    "static": false,
    "longname": "src/ast.js~Junk#annotations",
    "access": "public",
    "description": null,
    "lineNumber": 338,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 169,
    "kind": "member",
    "name": "content",
    "memberof": "src/ast.js~Junk",
    "static": false,
    "longname": "src/ast.js~Junk#content",
    "access": "public",
    "description": null,
    "lineNumber": 339,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 170,
    "kind": "method",
    "name": "addAnnotation",
    "memberof": "src/ast.js~Junk",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/ast.js~Junk#addAnnotation",
    "access": "public",
    "description": null,
    "lineNumber": 342,
    "undocument": true,
    "params": [
      {
        "name": "annot",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 171,
    "kind": "class",
    "name": "Span",
    "memberof": "src/ast.js",
    "static": true,
    "longname": "src/ast.js~Span",
    "access": "public",
    "export": true,
    "importPath": "@fluent/syntax/src/ast.js",
    "importStyle": "{Span}",
    "description": null,
    "lineNumber": 347,
    "undocument": true,
    "interface": false,
    "extends": [
      "BaseNode"
    ]
  },
  {
    "__docId__": 172,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/ast.js~Span",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/ast.js~Span#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 348,
    "undocument": true
  },
  {
    "__docId__": 173,
    "kind": "member",
    "name": "type",
    "memberof": "src/ast.js~Span",
    "static": false,
    "longname": "src/ast.js~Span#type",
    "access": "public",
    "description": null,
    "lineNumber": 350,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 174,
    "kind": "member",
    "name": "start",
    "memberof": "src/ast.js~Span",
    "static": false,
    "longname": "src/ast.js~Span#start",
    "access": "public",
    "description": null,
    "lineNumber": 351,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 175,
    "kind": "member",
    "name": "end",
    "memberof": "src/ast.js~Span",
    "static": false,
    "longname": "src/ast.js~Span#end",
    "access": "public",
    "description": null,
    "lineNumber": 352,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 176,
    "kind": "class",
    "name": "Annotation",
    "memberof": "src/ast.js",
    "static": true,
    "longname": "src/ast.js~Annotation",
    "access": "public",
    "export": true,
    "importPath": "@fluent/syntax/src/ast.js",
    "importStyle": "{Annotation}",
    "description": null,
    "lineNumber": 356,
    "undocument": true,
    "interface": false,
    "extends": [
      "SyntaxNode"
    ]
  },
  {
    "__docId__": 177,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/ast.js~Annotation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/ast.js~Annotation#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 357,
    "undocument": true
  },
  {
    "__docId__": 178,
    "kind": "member",
    "name": "type",
    "memberof": "src/ast.js~Annotation",
    "static": false,
    "longname": "src/ast.js~Annotation#type",
    "access": "public",
    "description": null,
    "lineNumber": 359,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 179,
    "kind": "member",
    "name": "code",
    "memberof": "src/ast.js~Annotation",
    "static": false,
    "longname": "src/ast.js~Annotation#code",
    "access": "public",
    "description": null,
    "lineNumber": 360,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 180,
    "kind": "member",
    "name": "arguments",
    "memberof": "src/ast.js~Annotation",
    "static": false,
    "longname": "src/ast.js~Annotation#arguments",
    "access": "public",
    "description": null,
    "lineNumber": 361,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 181,
    "kind": "member",
    "name": "message",
    "memberof": "src/ast.js~Annotation",
    "static": false,
    "longname": "src/ast.js~Annotation#message",
    "access": "public",
    "description": null,
    "lineNumber": 362,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 182,
    "kind": "file",
    "name": "src/errors.js",
    "content": "export class ParseError extends Error {\n  constructor(code, ...args) {\n    super();\n    this.code = code;\n    this.args = args;\n    this.message = getErrorMessage(code, args);\n  }\n}\n\n/* eslint-disable complexity */\nfunction getErrorMessage(code, args) {\n  switch (code) {\n    case \"E0001\":\n      return \"Generic error\";\n    case \"E0002\":\n      return \"Expected an entry start\";\n    case \"E0003\": {\n      const [token] = args;\n      return `Expected token: \"${token}\"`;\n    }\n    case \"E0004\": {\n      const [range] = args;\n      return `Expected a character from range: \"${range}\"`;\n    }\n    case \"E0005\": {\n      const [id] = args;\n      return `Expected message \"${id}\" to have a value or attributes`;\n    }\n    case \"E0006\": {\n      const [id] = args;\n      return `Expected term \"-${id}\" to have a value`;\n    }\n    case \"E0007\":\n      return \"Keyword cannot end with a whitespace\";\n    case \"E0008\":\n      return \"The callee has to be an upper-case identifier or a term\";\n    case \"E0009\":\n      return \"The argument name has to be a simple identifier\";\n    case \"E0010\":\n      return \"Expected one of the variants to be marked as default (*)\";\n    case \"E0011\":\n      return 'Expected at least one variant after \"->\"';\n    case \"E0012\":\n      return \"Expected value\";\n    case \"E0013\":\n      return \"Expected variant key\";\n    case \"E0014\":\n      return \"Expected literal\";\n    case \"E0015\":\n      return \"Only one variant can be marked as default (*)\";\n    case \"E0016\":\n      return \"Message references cannot be used as selectors\";\n    case \"E0017\":\n      return \"Terms cannot be used as selectors\";\n    case \"E0018\":\n      return \"Attributes of messages cannot be used as selectors\";\n    case \"E0019\":\n      return \"Attributes of terms cannot be used as placeables\";\n    case \"E0020\":\n      return \"Unterminated string expression\";\n    case \"E0021\":\n      return \"Positional arguments must not follow named arguments\";\n    case \"E0022\":\n      return \"Named arguments must be unique\";\n    case \"E0024\":\n      return \"Cannot access variants of a message.\";\n    case \"E0025\": {\n      const [char] = args;\n      return `Unknown escape sequence: \\\\${char}.`;\n    }\n    case \"E0026\": {\n      const [sequence] = args;\n      return `Invalid Unicode escape sequence: ${sequence}.`;\n    }\n    case \"E0027\":\n      return \"Unbalanced closing brace in TextElement.\";\n    case \"E0028\":\n      return \"Expected an inline expression\";\n    case \"E0029\":\n      return \"Expected simple expression as selector\";\n    default:\n      return code;\n  }\n}\n",
    "static": true,
    "longname": "/c/Users/stas/Mozilla/fluent/fluent.js/fluent-syntax/src/errors.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 183,
    "kind": "class",
    "name": "ParseError",
    "memberof": "src/errors.js",
    "static": true,
    "longname": "src/errors.js~ParseError",
    "access": "public",
    "export": true,
    "importPath": "@fluent/syntax/src/errors.js",
    "importStyle": "{ParseError}",
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "interface": false,
    "extends": [
      "Error"
    ]
  },
  {
    "__docId__": 184,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/errors.js~ParseError",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/errors.js~ParseError#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 2,
    "undocument": true
  },
  {
    "__docId__": 185,
    "kind": "member",
    "name": "code",
    "memberof": "src/errors.js~ParseError",
    "static": false,
    "longname": "src/errors.js~ParseError#code",
    "access": "public",
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 186,
    "kind": "member",
    "name": "args",
    "memberof": "src/errors.js~ParseError",
    "static": false,
    "longname": "src/errors.js~ParseError#args",
    "access": "public",
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 187,
    "kind": "member",
    "name": "message",
    "memberof": "src/errors.js~ParseError",
    "static": false,
    "longname": "src/errors.js~ParseError#message",
    "access": "public",
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 188,
    "kind": "function",
    "name": "getErrorMessage",
    "memberof": "src/errors.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/errors.js~getErrorMessage",
    "access": "public",
    "export": false,
    "importPath": "@fluent/syntax/src/errors.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "params": [
      {
        "name": "code",
        "types": [
          "*"
        ]
      },
      {
        "name": "args",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 189,
    "kind": "file",
    "name": "src/index.js",
    "content": "import {FluentParser} from \"./parser\";\nimport {FluentSerializer} from \"./serializer\";\n\nexport * from \"./ast\";\nexport * from \"./parser\";\nexport * from \"./serializer\";\nexport * from \"./visitor\";\n\nexport function parse(source, opts) {\n  const parser = new FluentParser(opts);\n  return parser.parse(source);\n}\n\nexport function serialize(resource, opts) {\n  const serializer = new FluentSerializer(opts);\n  return serializer.serialize(resource);\n}\n\nexport function lineOffset(source, pos) {\n  // Subtract 1 to get the offset.\n  return source.substring(0, pos).split(\"\\n\").length - 1;\n}\n\nexport function columnOffset(source, pos) {\n  // Find the last line break starting backwards from the index just before\n  // pos.  This allows us to correctly handle ths case where the character at\n  // pos  is a line break as well.\n  const fromIndex = pos - 1;\n  const prevLineBreak = source.lastIndexOf(\"\\n\", fromIndex);\n\n  // pos is a position in the first line of source.\n  if (prevLineBreak === -1) {\n    return pos;\n  }\n\n  // Subtracting two offsets gives length; subtract 1 to get the offset.\n  return pos - prevLineBreak - 1;\n}\n",
    "static": true,
    "longname": "/c/Users/stas/Mozilla/fluent/fluent.js/fluent-syntax/src/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 190,
    "kind": "function",
    "name": "parse",
    "memberof": "src/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/index.js~parse",
    "access": "public",
    "export": true,
    "importPath": "@fluent/syntax/src/index.js",
    "importStyle": "{parse}",
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "params": [
      {
        "name": "source",
        "types": [
          "*"
        ]
      },
      {
        "name": "opts",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 191,
    "kind": "function",
    "name": "serialize",
    "memberof": "src/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/index.js~serialize",
    "access": "public",
    "export": true,
    "importPath": "@fluent/syntax/src/index.js",
    "importStyle": "{serialize}",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "params": [
      {
        "name": "resource",
        "types": [
          "*"
        ]
      },
      {
        "name": "opts",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 192,
    "kind": "function",
    "name": "lineOffset",
    "memberof": "src/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/index.js~lineOffset",
    "access": "public",
    "export": true,
    "importPath": "@fluent/syntax/src/index.js",
    "importStyle": "{lineOffset}",
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "params": [
      {
        "name": "source",
        "types": [
          "*"
        ]
      },
      {
        "name": "pos",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 193,
    "kind": "function",
    "name": "columnOffset",
    "memberof": "src/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/index.js~columnOffset",
    "access": "public",
    "export": true,
    "importPath": "@fluent/syntax/src/index.js",
    "importStyle": "{columnOffset}",
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "params": [
      {
        "name": "source",
        "types": [
          "*"
        ]
      },
      {
        "name": "pos",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 194,
    "kind": "file",
    "name": "src/parser.js",
    "content": "/*  eslint no-magic-numbers: [0]  */\n\nimport * as AST from \"./ast\";\nimport { EOF, EOL, FluentParserStream } from \"./stream\";\nimport { ParseError } from \"./errors\";\n\n\nconst trailingWSRe = /[ \\t\\n\\r]+$/;\n\n\nfunction withSpan(fn) {\n  return function(ps, ...args) {\n    if (!this.withSpans) {\n      return fn.call(this, ps, ...args);\n    }\n\n    const start = ps.index;\n    const node = fn.call(this, ps, ...args);\n\n    // Don't re-add the span if the node already has it. This may happen when\n    // one decorated function calls another decorated function.\n    if (node.span) {\n      return node;\n    }\n\n    const end = ps.index;\n    node.addSpan(start, end);\n    return node;\n  };\n}\n\n\nexport\nclass FluentParser {\n  constructor({\n    withSpans = true,\n  } = {}) {\n    this.withSpans = withSpans;\n\n    // Poor man's decorators.\n    const methodNames = [\n      \"getComment\", \"getMessage\", \"getTerm\", \"getAttribute\", \"getIdentifier\",\n      \"getVariant\", \"getNumber\", \"getPattern\", \"getTextElement\",\n      \"getPlaceable\", \"getExpression\", \"getInlineExpression\",\n      \"getCallArgument\", \"getCallArguments\", \"getString\", \"getLiteral\",\n    ];\n    for (const name of methodNames) {\n      this[name] = withSpan(this[name]);\n    }\n  }\n\n  parse(source) {\n    const ps = new FluentParserStream(source);\n    ps.skipBlankBlock();\n\n    const entries = [];\n    let lastComment = null;\n\n    while (ps.currentChar) {\n      const entry = this.getEntryOrJunk(ps);\n      const blankLines = ps.skipBlankBlock();\n\n      // Regular Comments require special logic. Comments may be attached to\n      // Messages or Terms if they are followed immediately by them. However\n      // they should parse as standalone when they're followed by Junk.\n      // Consequently, we only attach Comments once we know that the Message\n      // or the Term parsed successfully.\n      if (entry.type === \"Comment\"\n          && blankLines.length === 0\n          && ps.currentChar) {\n        // Stash the comment and decide what to do with it in the next pass.\n        lastComment = entry;\n        continue;\n      }\n\n      if (lastComment) {\n        if (entry.type === \"Message\" || entry.type === \"Term\") {\n          entry.comment = lastComment;\n          if (this.withSpans) {\n            entry.span.start = entry.comment.span.start;\n          }\n        } else {\n          entries.push(lastComment);\n        }\n        // In either case, the stashed comment has been dealt with; clear it.\n        lastComment = null;\n      }\n\n      // No special logic for other types of entries.\n      entries.push(entry);\n    }\n\n    const res = new AST.Resource(entries);\n\n    if (this.withSpans) {\n      res.addSpan(0, ps.index);\n    }\n\n    return res;\n  }\n\n  /*\n   * Parse the first Message or Term in `source`.\n   *\n   * Skip all encountered comments and start parsing at the first Message or\n   * Term start. Return Junk if the parsing is not successful.\n   *\n   * Preceding comments are ignored unless they contain syntax errors\n   * themselves, in which case Junk for the invalid comment is returned.\n   */\n  parseEntry(source) {\n    const ps = new FluentParserStream(source);\n    ps.skipBlankBlock();\n\n    while (ps.currentChar === \"#\") {\n      const skipped = this.getEntryOrJunk(ps);\n      if (skipped.type === \"Junk\") {\n        // Don't skip Junk comments.\n        return skipped;\n      }\n      ps.skipBlankBlock();\n    }\n\n    return this.getEntryOrJunk(ps);\n  }\n\n  getEntryOrJunk(ps) {\n    const entryStartPos = ps.index;\n\n    try {\n      const entry = this.getEntry(ps);\n      ps.expectLineEnd();\n      return entry;\n    } catch (err) {\n      if (!(err instanceof ParseError)) {\n        throw err;\n      }\n\n      let errorIndex = ps.index;\n      ps.skipToNextEntryStart(entryStartPos);\n      const nextEntryStart = ps.index;\n      if (nextEntryStart < errorIndex) {\n        // The position of the error must be inside of the Junk's span.\n        errorIndex = nextEntryStart;\n      }\n\n      // Create a Junk instance\n      const slice = ps.string.substring(entryStartPos, nextEntryStart);\n      const junk = new AST.Junk(slice);\n      if (this.withSpans) {\n        junk.addSpan(entryStartPos, nextEntryStart);\n      }\n      const annot = new AST.Annotation(err.code, err.args, err.message);\n      annot.addSpan(errorIndex, errorIndex);\n      junk.addAnnotation(annot);\n      return junk;\n    }\n  }\n\n  getEntry(ps) {\n    if (ps.currentChar === \"#\") {\n      return this.getComment(ps);\n    }\n\n    if (ps.currentChar === \"-\") {\n      return this.getTerm(ps);\n    }\n\n    if (ps.isIdentifierStart()) {\n      return this.getMessage(ps);\n    }\n\n    throw new ParseError(\"E0002\");\n  }\n\n  getComment(ps) {\n    // 0 - comment\n    // 1 - group comment\n    // 2 - resource comment\n    let level = -1;\n    let content = \"\";\n\n    while (true) {\n      let i = -1;\n      while (ps.currentChar === \"#\" && (i < (level === -1 ? 2 : level))) {\n        ps.next();\n        i++;\n      }\n\n      if (level === -1) {\n        level = i;\n      }\n\n      if (ps.currentChar !== EOL) {\n        ps.expectChar(\" \");\n        let ch;\n        while ((ch = ps.takeChar(x => x !== EOL))) {\n          content += ch;\n        }\n      }\n\n      if (ps.isNextLineComment(level)) {\n        content += ps.currentChar;\n        ps.next();\n      } else {\n        break;\n      }\n    }\n\n    let Comment;\n    switch (level) {\n      case 0:\n        Comment = AST.Comment;\n        break;\n      case 1:\n        Comment = AST.GroupComment;\n        break;\n      case 2:\n        Comment = AST.ResourceComment;\n        break;\n    }\n    return new Comment(content);\n  }\n\n  getMessage(ps) {\n    const id = this.getIdentifier(ps);\n\n    ps.skipBlankInline();\n    ps.expectChar(\"=\");\n\n    const value = this.maybeGetPattern(ps);\n    const attrs = this.getAttributes(ps);\n\n    if (value === null && attrs.length === 0) {\n      throw new ParseError(\"E0005\", id.name);\n    }\n\n    return new AST.Message(id, value, attrs);\n  }\n\n  getTerm(ps) {\n    ps.expectChar(\"-\");\n    const id = this.getIdentifier(ps);\n\n    ps.skipBlankInline();\n    ps.expectChar(\"=\");\n\n    const value = this.maybeGetPattern(ps);\n    if (value === null) {\n      throw new ParseError(\"E0006\", id.name);\n    }\n\n    const attrs = this.getAttributes(ps);\n    return new AST.Term(id, value, attrs);\n  }\n\n  getAttribute(ps) {\n    ps.expectChar(\".\");\n\n    const key = this.getIdentifier(ps);\n\n    ps.skipBlankInline();\n    ps.expectChar(\"=\");\n\n    const value = this.maybeGetPattern(ps);\n    if (value === null) {\n      throw new ParseError(\"E0012\");\n    }\n\n    return new AST.Attribute(key, value);\n  }\n\n  getAttributes(ps) {\n    const attrs = [];\n    ps.peekBlank();\n    while (ps.isAttributeStart()) {\n      ps.skipToPeek();\n      const attr = this.getAttribute(ps);\n      attrs.push(attr);\n      ps.peekBlank();\n    }\n    return attrs;\n  }\n\n  getIdentifier(ps) {\n    let name = ps.takeIDStart();\n\n    let ch;\n    while ((ch = ps.takeIDChar())) {\n      name += ch;\n    }\n\n    return new AST.Identifier(name);\n  }\n\n  getVariantKey(ps) {\n    const ch = ps.currentChar;\n\n    if (ch === EOF) {\n      throw new ParseError(\"E0013\");\n    }\n\n    const cc = ch.charCodeAt(0);\n\n    if ((cc >= 48 && cc <= 57) || cc === 45) { // 0-9, -\n      return this.getNumber(ps);\n    }\n\n    return this.getIdentifier(ps);\n  }\n\n  getVariant(ps, {hasDefault}) {\n    let defaultIndex = false;\n\n    if (ps.currentChar === \"*\") {\n      if (hasDefault) {\n        throw new ParseError(\"E0015\");\n      }\n      ps.next();\n      defaultIndex = true;\n    }\n\n    ps.expectChar(\"[\");\n\n    ps.skipBlank();\n\n    const key = this.getVariantKey(ps);\n\n    ps.skipBlank();\n    ps.expectChar(\"]\");\n\n    const value = this.maybeGetPattern(ps);\n    if (value === null) {\n      throw new ParseError(\"E0012\");\n    }\n\n    return new AST.Variant(key, value, defaultIndex);\n  }\n\n  getVariants(ps) {\n    const variants = [];\n    let hasDefault = false;\n\n    ps.skipBlank();\n    while (ps.isVariantStart()) {\n      const variant = this.getVariant(ps, {hasDefault});\n\n      if (variant.default) {\n        hasDefault = true;\n      }\n\n      variants.push(variant);\n      ps.expectLineEnd();\n      ps.skipBlank();\n    }\n\n    if (variants.length === 0) {\n      throw new ParseError(\"E0011\");\n    }\n\n    if (!hasDefault) {\n      throw new ParseError(\"E0010\");\n    }\n\n    return variants;\n  }\n\n  getDigits(ps) {\n    let num = \"\";\n\n    let ch;\n    while ((ch = ps.takeDigit())) {\n      num += ch;\n    }\n\n    if (num.length === 0) {\n      throw new ParseError(\"E0004\", \"0-9\");\n    }\n\n    return num;\n  }\n\n  getNumber(ps) {\n    let value = \"\";\n\n    if (ps.currentChar === \"-\") {\n      ps.next();\n      value += `-${this.getDigits(ps)}`;\n    } else {\n      value += this.getDigits(ps);\n    }\n\n    if (ps.currentChar === \".\") {\n      ps.next();\n      value += `.${this.getDigits(ps)}`;\n    }\n\n    return new AST.NumberLiteral(value);\n  }\n\n  // maybeGetPattern distinguishes between patterns which start on the same line\n  // as the identifier (a.k.a. inline signleline patterns and inline multiline\n  // patterns) and patterns which start on a new line (a.k.a. block multiline\n  // patterns). The distinction is important for the dedentation logic: the\n  // indent of the first line of a block pattern must be taken into account when\n  // calculating the maximum common indent.\n  maybeGetPattern(ps) {\n    ps.peekBlankInline();\n    if (ps.isValueStart()) {\n      ps.skipToPeek();\n      return this.getPattern(ps, {isBlock: false});\n    }\n\n    ps.peekBlankBlock();\n    if (ps.isValueContinuation()) {\n      ps.skipToPeek();\n      return this.getPattern(ps, {isBlock: true});\n    }\n\n    return null;\n  }\n\n  getPattern(ps, {isBlock}) {\n    const elements = [];\n    if (isBlock) {\n      // A block pattern is a pattern which starts on a new line. Store and\n      // measure the indent of this first line for the dedentation logic.\n      const blankStart = ps.index;\n      const firstIndent = ps.skipBlankInline();\n      elements.push(this.getIndent(ps, firstIndent, blankStart));\n      var commonIndentLength = firstIndent.length;\n    } else {\n      commonIndentLength = Infinity;\n    }\n\n    let ch;\n    elements: while ((ch = ps.currentChar)) {\n      switch (ch) {\n        case EOL: {\n          const blankStart = ps.index;\n          const blankLines = ps.peekBlankBlock();\n          if (ps.isValueContinuation()) {\n            ps.skipToPeek();\n            const indent = ps.skipBlankInline();\n            commonIndentLength = Math.min(commonIndentLength, indent.length);\n            elements.push(this.getIndent(ps, blankLines + indent, blankStart));\n            continue elements;\n          }\n\n          // The end condition for getPattern's while loop is a newline\n          // which is not followed by a valid pattern continuation.\n          ps.resetPeek();\n          break elements;\n        }\n        case \"{\":\n          elements.push(this.getPlaceable(ps));\n          continue elements;\n        case \"}\":\n          throw new ParseError(\"E0027\");\n        default:\n          const element = this.getTextElement(ps);\n          elements.push(element);\n      }\n    }\n\n    const dedented = this.dedent(elements, commonIndentLength);\n    return new AST.Pattern(dedented);\n  }\n\n  // Create a token representing an indent. It's not part of the AST and it will\n  // be trimmed and merged into adjacent TextElements, or turned into a new\n  // TextElement, if it's surrounded by two Placeables.\n  getIndent(ps, value, start) {\n    return {\n      type: \"Indent\",\n      span: {start, end: ps.index},\n      value,\n    };\n  }\n\n  // Dedent a list of elements by removing the maximum common indent from the\n  // beginning of text lines. The common indent is calculated in getPattern.\n  dedent(elements, commonIndent) {\n    const trimmed = [];\n\n    for (let element of elements) {\n      if (element.type === \"Placeable\") {\n        trimmed.push(element);\n        continue;\n      }\n\n      if (element.type === \"Indent\") {\n        // Strip common indent.\n        element.value = element.value.slice(\n          0, element.value.length - commonIndent);\n        if (element.value.length === 0) {\n          continue;\n        }\n      }\n\n      let prev = trimmed[trimmed.length - 1];\n      if (prev && prev.type === \"TextElement\") {\n        // Join adjacent TextElements by replacing them with their sum.\n        const sum = new AST.TextElement(prev.value + element.value);\n        if (this.withSpans) {\n          sum.addSpan(prev.span.start, element.span.end);\n        }\n        trimmed[trimmed.length - 1] = sum;\n        continue;\n      }\n\n      if (element.type === \"Indent\") {\n        // If the indent hasn't been merged into a preceding TextElement,\n        // convert it into a new TextElement.\n        const textElement = new AST.TextElement(element.value);\n        if (this.withSpans) {\n          textElement.addSpan(element.span.start, element.span.end);\n        }\n        element = textElement;\n      }\n\n      trimmed.push(element);\n    }\n\n    // Trim trailing whitespace from the Pattern.\n    const lastElement = trimmed[trimmed.length - 1];\n    if (lastElement.type === \"TextElement\") {\n      lastElement.value = lastElement.value.replace(trailingWSRe, \"\");\n      if (lastElement.value.length === 0) {\n        trimmed.pop();\n      }\n    }\n\n    return trimmed;\n  }\n\n  getTextElement(ps) {\n    let buffer = \"\";\n\n    let ch;\n    while ((ch = ps.currentChar)) {\n      if (ch === \"{\" || ch === \"}\") {\n        return new AST.TextElement(buffer);\n      }\n\n      if (ch === EOL) {\n        return new AST.TextElement(buffer);\n      }\n\n      buffer += ch;\n      ps.next();\n    }\n\n    return new AST.TextElement(buffer);\n  }\n\n  getEscapeSequence(ps) {\n    const next = ps.currentChar;\n\n    switch (next) {\n      case \"\\\\\":\n      case \"\\\"\":\n        ps.next();\n        return `\\\\${next}`;\n      case \"u\":\n        return this.getUnicodeEscapeSequence(ps, next, 4);\n      case \"U\":\n        return this.getUnicodeEscapeSequence(ps, next, 6);\n      default:\n        throw new ParseError(\"E0025\", next);\n    }\n  }\n\n  getUnicodeEscapeSequence(ps, u, digits) {\n    ps.expectChar(u);\n\n    let sequence = \"\";\n    for (let i = 0; i < digits; i++) {\n      const ch = ps.takeHexDigit();\n\n      if (!ch) {\n        throw new ParseError(\n          \"E0026\", `\\\\${u}${sequence}${ps.currentChar}`);\n      }\n\n      sequence += ch;\n    }\n\n    return `\\\\${u}${sequence}`;\n  }\n\n  getPlaceable(ps) {\n    ps.expectChar(\"{\");\n    ps.skipBlank();\n    const expression = this.getExpression(ps);\n    ps.expectChar(\"}\");\n    return new AST.Placeable(expression);\n  }\n\n  getExpression(ps) {\n    const selector = this.getInlineExpression(ps);\n    ps.skipBlank();\n\n    if (ps.currentChar === \"-\") {\n      if (ps.peek() !== \">\") {\n        ps.resetPeek();\n        return selector;\n      }\n\n      // Validate selector expression according to\n      // abstract.js in the Fluent specification\n      switch (selector.type) {\n        case \"MessageReference\":\n          if (selector.attribute === null) {\n            throw new ParseError(\"E0016\");\n          } else {\n            throw new ParseError(\"E0018\");\n          }\n        case \"TermReference\":\n          if (selector.attribute === null) {\n            throw new ParseError(\"E0017\");\n          }\n        case \"StringLiteral\":\n        case \"NumberLiteral\":\n        case \"VariableReference\":\n        case \"FunctionReference\":\n          break;\n        default:\n          throw new ParseError(\"E0029\");\n      }\n\n      ps.next();\n      ps.next();\n\n      ps.skipBlankInline();\n      ps.expectLineEnd();\n\n      const variants = this.getVariants(ps);\n      return new AST.SelectExpression(selector, variants);\n    }\n\n    if (selector.type === \"TermReference\" && selector.attribute !== null) {\n      throw new ParseError(\"E0019\");\n    }\n\n    return selector;\n  }\n\n  getInlineExpression(ps) {\n    if (ps.currentChar === \"{\") {\n      return this.getPlaceable(ps);\n    }\n\n    if (ps.isNumberStart()) {\n      return this.getNumber(ps);\n    }\n\n    if (ps.currentChar === '\"') {\n      return this.getString(ps);\n    }\n\n    if (ps.currentChar === \"$\") {\n      ps.next();\n      const id = this.getIdentifier(ps);\n      return new AST.VariableReference(id);\n    }\n\n    if (ps.currentChar === \"-\") {\n      ps.next();\n      const id = this.getIdentifier(ps);\n\n      let attr;\n      if (ps.currentChar === \".\") {\n        ps.next();\n        attr = this.getIdentifier(ps);\n      }\n\n      let args;\n      ps.peekBlank();\n      if (ps.currentPeek === \"(\") {\n        ps.skipToPeek();\n        args = this.getCallArguments(ps);\n      }\n\n      return new AST.TermReference(id, attr, args);\n    }\n\n    if (ps.isIdentifierStart()) {\n      const id = this.getIdentifier(ps);\n      ps.peekBlank();\n\n      if (ps.currentPeek === \"(\") {\n        // It's a Function. Ensure it's all upper-case.\n        if (!/^[A-Z][A-Z0-9_-]*$/.test(id.name)) {\n          throw new ParseError(\"E0008\");\n        }\n\n        ps.skipToPeek();\n        let args = this.getCallArguments(ps);\n        return new AST.FunctionReference(id, args);\n      }\n\n      let attr;\n      if (ps.currentChar === \".\") {\n        ps.next();\n        attr = this.getIdentifier(ps);\n      }\n\n      return new AST.MessageReference(id, attr);\n    }\n\n\n    throw new ParseError(\"E0028\");\n  }\n\n  getCallArgument(ps) {\n    const exp = this.getInlineExpression(ps);\n\n    ps.skipBlank();\n\n    if (ps.currentChar !== \":\") {\n      return exp;\n    }\n\n    if (exp.type === \"MessageReference\" && exp.attribute === null) {\n      ps.next();\n      ps.skipBlank();\n\n      const value = this.getLiteral(ps);\n      return new AST.NamedArgument(exp.id, value);\n    }\n\n    throw new ParseError(\"E0009\");\n  }\n\n  getCallArguments(ps) {\n    const positional = [];\n    const named = [];\n    const argumentNames = new Set();\n\n    ps.expectChar(\"(\");\n    ps.skipBlank();\n\n    while (true) {\n      if (ps.currentChar === \")\") {\n        break;\n      }\n\n      const arg = this.getCallArgument(ps);\n      if (arg.type === \"NamedArgument\") {\n        if (argumentNames.has(arg.name.name)) {\n          throw new ParseError(\"E0022\");\n        }\n        named.push(arg);\n        argumentNames.add(arg.name.name);\n      } else if (argumentNames.size > 0) {\n        throw new ParseError(\"E0021\");\n      } else {\n        positional.push(arg);\n      }\n\n      ps.skipBlank();\n\n      if (ps.currentChar === \",\") {\n        ps.next();\n        ps.skipBlank();\n        continue;\n      }\n\n      break;\n    }\n\n    ps.expectChar(\")\");\n    return new AST.CallArguments(positional, named);\n  }\n\n  getString(ps) {\n    ps.expectChar(\"\\\"\");\n    let value = \"\";\n\n    let ch;\n    while ((ch = ps.takeChar(x => x !== '\"' && x !== EOL))) {\n      if (ch === \"\\\\\") {\n        value += this.getEscapeSequence(ps);\n      } else {\n        value += ch;\n      }\n    }\n\n    if (ps.currentChar === EOL) {\n      throw new ParseError(\"E0020\");\n    }\n\n    ps.expectChar(\"\\\"\");\n\n    return new AST.StringLiteral(value);\n  }\n\n  getLiteral(ps) {\n    if (ps.isNumberStart()) {\n      return this.getNumber(ps);\n    }\n\n    if (ps.currentChar === '\"') {\n      return this.getString(ps);\n    }\n\n    throw new ParseError(\"E0014\");\n  }\n}\n",
    "static": true,
    "longname": "/c/Users/stas/Mozilla/fluent/fluent.js/fluent-syntax/src/parser.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 195,
    "kind": "variable",
    "name": "trailingWSRe",
    "memberof": "src/parser.js",
    "static": true,
    "longname": "src/parser.js~trailingWSRe",
    "access": "public",
    "export": false,
    "importPath": "@fluent/syntax/src/parser.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "undefined"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 196,
    "kind": "function",
    "name": "withSpan",
    "memberof": "src/parser.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/parser.js~withSpan",
    "access": "public",
    "export": false,
    "importPath": "@fluent/syntax/src/parser.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "params": [
      {
        "name": "fn",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 197,
    "kind": "class",
    "name": "FluentParser",
    "memberof": "src/parser.js",
    "static": true,
    "longname": "src/parser.js~FluentParser",
    "access": "public",
    "export": true,
    "importPath": "@fluent/syntax/src/parser.js",
    "importStyle": "{FluentParser}",
    "description": null,
    "lineNumber": 34,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 198,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/parser.js~FluentParser",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/parser.js~FluentParser#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 35,
    "undocument": true
  },
  {
    "__docId__": 199,
    "kind": "member",
    "name": "withSpans",
    "memberof": "src/parser.js~FluentParser",
    "static": false,
    "longname": "src/parser.js~FluentParser#withSpans",
    "access": "public",
    "description": null,
    "lineNumber": 38,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 200,
    "kind": "member",
    "name": "[name]",
    "memberof": "src/parser.js~FluentParser",
    "static": false,
    "longname": "src/parser.js~FluentParser#[name]",
    "access": "public",
    "description": null,
    "lineNumber": 48,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 201,
    "kind": "method",
    "name": "parse",
    "memberof": "src/parser.js~FluentParser",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/parser.js~FluentParser#parse",
    "access": "public",
    "description": null,
    "lineNumber": 52,
    "undocument": true,
    "params": [
      {
        "name": "source",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 202,
    "kind": "method",
    "name": "parseEntry",
    "memberof": "src/parser.js~FluentParser",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/parser.js~FluentParser#parseEntry",
    "access": "public",
    "description": null,
    "lineNumber": 111,
    "undocument": true,
    "params": [
      {
        "name": "source",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 203,
    "kind": "method",
    "name": "getEntryOrJunk",
    "memberof": "src/parser.js~FluentParser",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/parser.js~FluentParser#getEntryOrJunk",
    "access": "public",
    "description": null,
    "lineNumber": 127,
    "undocument": true,
    "params": [
      {
        "name": "ps",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 204,
    "kind": "method",
    "name": "getEntry",
    "memberof": "src/parser.js~FluentParser",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/parser.js~FluentParser#getEntry",
    "access": "public",
    "description": null,
    "lineNumber": 160,
    "undocument": true,
    "params": [
      {
        "name": "ps",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 205,
    "kind": "method",
    "name": "getComment",
    "memberof": "src/parser.js~FluentParser",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/parser.js~FluentParser#getComment",
    "access": "public",
    "description": null,
    "lineNumber": 176,
    "undocument": true,
    "params": [
      {
        "name": "ps",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 206,
    "kind": "method",
    "name": "getMessage",
    "memberof": "src/parser.js~FluentParser",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/parser.js~FluentParser#getMessage",
    "access": "public",
    "description": null,
    "lineNumber": 225,
    "undocument": true,
    "params": [
      {
        "name": "ps",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 207,
    "kind": "method",
    "name": "getTerm",
    "memberof": "src/parser.js~FluentParser",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/parser.js~FluentParser#getTerm",
    "access": "public",
    "description": null,
    "lineNumber": 241,
    "undocument": true,
    "params": [
      {
        "name": "ps",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 208,
    "kind": "method",
    "name": "getAttribute",
    "memberof": "src/parser.js~FluentParser",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/parser.js~FluentParser#getAttribute",
    "access": "public",
    "description": null,
    "lineNumber": 257,
    "undocument": true,
    "params": [
      {
        "name": "ps",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 209,
    "kind": "method",
    "name": "getAttributes",
    "memberof": "src/parser.js~FluentParser",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/parser.js~FluentParser#getAttributes",
    "access": "public",
    "description": null,
    "lineNumber": 273,
    "undocument": true,
    "params": [
      {
        "name": "ps",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 210,
    "kind": "method",
    "name": "getIdentifier",
    "memberof": "src/parser.js~FluentParser",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/parser.js~FluentParser#getIdentifier",
    "access": "public",
    "description": null,
    "lineNumber": 285,
    "undocument": true,
    "params": [
      {
        "name": "ps",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 211,
    "kind": "method",
    "name": "getVariantKey",
    "memberof": "src/parser.js~FluentParser",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/parser.js~FluentParser#getVariantKey",
    "access": "public",
    "description": null,
    "lineNumber": 296,
    "undocument": true,
    "params": [
      {
        "name": "ps",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 212,
    "kind": "method",
    "name": "getVariant",
    "memberof": "src/parser.js~FluentParser",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/parser.js~FluentParser#getVariant",
    "access": "public",
    "description": null,
    "lineNumber": 312,
    "undocument": true,
    "params": [
      {
        "name": "ps",
        "types": [
          "*"
        ]
      },
      {
        "name": "objectPattern1",
        "types": [
          "{\"hasDefault\": *}"
        ],
        "defaultRaw": {
          "hasDefault": null
        },
        "defaultValue": "{\"hasDefault\":null}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 213,
    "kind": "method",
    "name": "getVariants",
    "memberof": "src/parser.js~FluentParser",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/parser.js~FluentParser#getVariants",
    "access": "public",
    "description": null,
    "lineNumber": 340,
    "undocument": true,
    "params": [
      {
        "name": "ps",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 214,
    "kind": "method",
    "name": "getDigits",
    "memberof": "src/parser.js~FluentParser",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/parser.js~FluentParser#getDigits",
    "access": "public",
    "description": null,
    "lineNumber": 368,
    "undocument": true,
    "params": [
      {
        "name": "ps",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 215,
    "kind": "method",
    "name": "getNumber",
    "memberof": "src/parser.js~FluentParser",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/parser.js~FluentParser#getNumber",
    "access": "public",
    "description": null,
    "lineNumber": 383,
    "undocument": true,
    "params": [
      {
        "name": "ps",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 216,
    "kind": "method",
    "name": "maybeGetPattern",
    "memberof": "src/parser.js~FluentParser",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/parser.js~FluentParser#maybeGetPattern",
    "access": "public",
    "description": null,
    "lineNumber": 407,
    "undocument": true,
    "params": [
      {
        "name": "ps",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 217,
    "kind": "method",
    "name": "getPattern",
    "memberof": "src/parser.js~FluentParser",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/parser.js~FluentParser#getPattern",
    "access": "public",
    "description": null,
    "lineNumber": 423,
    "undocument": true,
    "params": [
      {
        "name": "ps",
        "types": [
          "*"
        ]
      },
      {
        "name": "objectPattern1",
        "types": [
          "{\"isBlock\": *}"
        ],
        "defaultRaw": {
          "isBlock": null
        },
        "defaultValue": "{\"isBlock\":null}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 218,
    "kind": "method",
    "name": "getIndent",
    "memberof": "src/parser.js~FluentParser",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/parser.js~FluentParser#getIndent",
    "access": "public",
    "description": null,
    "lineNumber": 473,
    "undocument": true,
    "params": [
      {
        "name": "ps",
        "types": [
          "*"
        ]
      },
      {
        "name": "value",
        "types": [
          "*"
        ]
      },
      {
        "name": "start",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "{\"type\": string, \"span\": *, \"value\": *}"
      ]
    }
  },
  {
    "__docId__": 219,
    "kind": "method",
    "name": "dedent",
    "memberof": "src/parser.js~FluentParser",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/parser.js~FluentParser#dedent",
    "access": "public",
    "description": null,
    "lineNumber": 483,
    "undocument": true,
    "params": [
      {
        "name": "elements",
        "types": [
          "*"
        ]
      },
      {
        "name": "commonIndent",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 220,
    "kind": "method",
    "name": "getTextElement",
    "memberof": "src/parser.js~FluentParser",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/parser.js~FluentParser#getTextElement",
    "access": "public",
    "description": null,
    "lineNumber": 537,
    "undocument": true,
    "params": [
      {
        "name": "ps",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 221,
    "kind": "method",
    "name": "getEscapeSequence",
    "memberof": "src/parser.js~FluentParser",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/parser.js~FluentParser#getEscapeSequence",
    "access": "public",
    "description": null,
    "lineNumber": 557,
    "undocument": true,
    "params": [
      {
        "name": "ps",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 222,
    "kind": "method",
    "name": "getUnicodeEscapeSequence",
    "memberof": "src/parser.js~FluentParser",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/parser.js~FluentParser#getUnicodeEscapeSequence",
    "access": "public",
    "description": null,
    "lineNumber": 574,
    "undocument": true,
    "params": [
      {
        "name": "ps",
        "types": [
          "*"
        ]
      },
      {
        "name": "u",
        "types": [
          "*"
        ]
      },
      {
        "name": "digits",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 223,
    "kind": "method",
    "name": "getPlaceable",
    "memberof": "src/parser.js~FluentParser",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/parser.js~FluentParser#getPlaceable",
    "access": "public",
    "description": null,
    "lineNumber": 592,
    "undocument": true,
    "params": [
      {
        "name": "ps",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 224,
    "kind": "method",
    "name": "getExpression",
    "memberof": "src/parser.js~FluentParser",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/parser.js~FluentParser#getExpression",
    "access": "public",
    "description": null,
    "lineNumber": 600,
    "undocument": true,
    "params": [
      {
        "name": "ps",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 225,
    "kind": "method",
    "name": "getInlineExpression",
    "memberof": "src/parser.js~FluentParser",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/parser.js~FluentParser#getInlineExpression",
    "access": "public",
    "description": null,
    "lineNumber": 649,
    "undocument": true,
    "params": [
      {
        "name": "ps",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 226,
    "kind": "method",
    "name": "getCallArgument",
    "memberof": "src/parser.js~FluentParser",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/parser.js~FluentParser#getCallArgument",
    "access": "public",
    "description": null,
    "lineNumber": 716,
    "undocument": true,
    "params": [
      {
        "name": "ps",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 227,
    "kind": "method",
    "name": "getCallArguments",
    "memberof": "src/parser.js~FluentParser",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/parser.js~FluentParser#getCallArguments",
    "access": "public",
    "description": null,
    "lineNumber": 736,
    "undocument": true,
    "params": [
      {
        "name": "ps",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 228,
    "kind": "method",
    "name": "getString",
    "memberof": "src/parser.js~FluentParser",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/parser.js~FluentParser#getString",
    "access": "public",
    "description": null,
    "lineNumber": 777,
    "undocument": true,
    "params": [
      {
        "name": "ps",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 229,
    "kind": "method",
    "name": "getLiteral",
    "memberof": "src/parser.js~FluentParser",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/parser.js~FluentParser#getLiteral",
    "access": "public",
    "description": null,
    "lineNumber": 799,
    "undocument": true,
    "params": [
      {
        "name": "ps",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 230,
    "kind": "file",
    "name": "src/serializer.js",
    "content": "import { includes } from \"./util\";\n\nfunction indent(content) {\n  return content.split(\"\\n\").join(\"\\n    \");\n}\n\nfunction includesNewLine(elem) {\n  return elem.type === \"TextElement\" && includes(elem.value, \"\\n\");\n}\n\nfunction isSelectExpr(elem) {\n  return elem.type === \"Placeable\"\n    && elem.expression.type === \"SelectExpression\";\n}\n\nexport\n// Bit masks representing the state of the serializer.\nconst HAS_ENTRIES = 1;\n\nexport\nclass FluentSerializer {\n  constructor({ withJunk = false } = {}) {\n    this.withJunk = withJunk;\n  }\n\n  serialize(resource) {\n    if (resource.type !== \"Resource\") {\n      throw new Error(`Unknown resource type: ${resource.type}`);\n    }\n\n    let state = 0;\n    const parts = [];\n\n    for (const entry of resource.body) {\n      if (entry.type !== \"Junk\" || this.withJunk) {\n        parts.push(this.serializeEntry(entry, state));\n        if (!(state & HAS_ENTRIES)) {\n          state |= HAS_ENTRIES;\n        }\n      }\n    }\n\n    return parts.join(\"\");\n  }\n\n  serializeEntry(entry, state = 0) {\n    switch (entry.type) {\n      case \"Message\":\n        return serializeMessage(entry);\n      case \"Term\":\n        return serializeTerm(entry);\n      case \"Comment\":\n        if (state & HAS_ENTRIES) {\n          return `\\n${serializeComment(entry, \"#\")}\\n`;\n        }\n        return `${serializeComment(entry, \"#\")}\\n`;\n      case \"GroupComment\":\n        if (state & HAS_ENTRIES) {\n          return `\\n${serializeComment(entry, \"##\")}\\n`;\n        }\n        return `${serializeComment(entry, \"##\")}\\n`;\n      case \"ResourceComment\":\n        if (state & HAS_ENTRIES) {\n          return `\\n${serializeComment(entry, \"###\")}\\n`;\n        }\n        return `${serializeComment(entry, \"###\")}\\n`;\n      case \"Junk\":\n        return serializeJunk(entry);\n      default :\n        throw new Error(`Unknown entry type: ${entry.type}`);\n    }\n  }\n}\n\n\nfunction serializeComment(comment, prefix = \"#\") {\n  const prefixed = comment.content.split(\"\\n\").map(\n    line => line.length ? `${prefix} ${line}` : prefix\n  ).join(\"\\n\");\n  // Add the trailing newline.\n  return `${prefixed}\\n`;\n}\n\n\nfunction serializeJunk(junk) {\n  return junk.content;\n}\n\n\nfunction serializeMessage(message) {\n  const parts = [];\n\n  if (message.comment) {\n    parts.push(serializeComment(message.comment));\n  }\n\n  parts.push(`${message.id.name} =`);\n\n  if (message.value) {\n    parts.push(serializePattern(message.value));\n  }\n\n  for (const attribute of message.attributes) {\n    parts.push(serializeAttribute(attribute));\n  }\n\n  parts.push(\"\\n\");\n  return parts.join(\"\");\n}\n\n\nfunction serializeTerm(term) {\n  const parts = [];\n\n  if (term.comment) {\n    parts.push(serializeComment(term.comment));\n  }\n\n  parts.push(`-${term.id.name} =`);\n  parts.push(serializePattern(term.value));\n\n  for (const attribute of term.attributes) {\n    parts.push(serializeAttribute(attribute));\n  }\n\n  parts.push(\"\\n\");\n  return parts.join(\"\");\n}\n\n\nfunction serializeAttribute(attribute) {\n  const value = indent(serializePattern(attribute.value));\n  return `\\n    .${attribute.id.name} =${value}`;\n}\n\n\nfunction serializePattern(pattern) {\n  const content = pattern.elements.map(serializeElement).join(\"\");\n  const startOnNewLine =\n    pattern.elements.some(isSelectExpr) ||\n    pattern.elements.some(includesNewLine);\n\n  if (startOnNewLine) {\n    return `\\n    ${indent(content)}`;\n  }\n\n  return ` ${content}`;\n}\n\n\nfunction serializeElement(element) {\n  switch (element.type) {\n    case \"TextElement\":\n      return element.value;\n    case \"Placeable\":\n      return serializePlaceable(element);\n    default:\n      throw new Error(`Unknown element type: ${element.type}`);\n  }\n}\n\n\nfunction serializePlaceable(placeable) {\n  const expr = placeable.expression;\n  switch (expr.type) {\n    case \"Placeable\":\n      return `{${serializePlaceable(expr)}}`;\n    case \"SelectExpression\":\n      // Special-case select expression to control the whitespace around the\n      // opening and the closing brace.\n      return `{ ${serializeExpression(expr)}}`;\n    default:\n      return `{ ${serializeExpression(expr)} }`;\n  }\n}\n\n\nexport\nfunction serializeExpression(expr) {\n  switch (expr.type) {\n    case \"StringLiteral\":\n      return `\"${expr.value}\"`;\n    case \"NumberLiteral\":\n      return expr.value;\n    case \"VariableReference\":\n      return `$${expr.id.name}`;\n    case \"TermReference\": {\n      let out = `-${expr.id.name}`;\n      if (expr.attribute) {\n        out += `.${expr.attribute.name}`;\n      }\n      if (expr.arguments) {\n        out += serializeCallArguments(expr.arguments);\n      }\n      return out;\n    }\n    case \"MessageReference\": {\n      let out = expr.id.name;\n      if (expr.attribute) {\n        out += `.${expr.attribute.name}`;\n      }\n      return out;\n    }\n    case \"FunctionReference\":\n      return `${expr.id.name}${serializeCallArguments(expr.arguments)}`;\n    case \"SelectExpression\": {\n      let out = `${serializeExpression(expr.selector)} ->`;\n      for (let variant of expr.variants) {\n        out += serializeVariant(variant);\n      }\n      return `${out}\\n`;\n    }\n    case \"Placeable\":\n      return serializePlaceable(expr);\n    default:\n      throw new Error(`Unknown expression type: ${expr.type}`);\n  }\n}\n\n\nfunction serializeVariant(variant) {\n  const key = serializeVariantKey(variant.key);\n  const value = indent(serializePattern(variant.value));\n\n  if (variant.default) {\n    return `\\n   *[${key}]${value}`;\n  }\n\n  return `\\n    [${key}]${value}`;\n}\n\n\nfunction serializeCallArguments(expr) {\n  const positional = expr.positional.map(serializeExpression).join(\", \");\n  const named = expr.named.map(serializeNamedArgument).join(\", \");\n  if (expr.positional.length > 0 && expr.named.length > 0) {\n    return `(${positional}, ${named})`;\n  }\n  return `(${positional || named})`;\n}\n\n\nfunction serializeNamedArgument(arg) {\n  const value = serializeExpression(arg.value);\n  return `${arg.name.name}: ${value}`;\n}\n\n\nexport\nfunction serializeVariantKey(key) {\n  switch (key.type) {\n    case \"Identifier\":\n      return key.name;\n    case \"NumberLiteral\":\n      return key.value;\n    default:\n      throw new Error(`Unknown variant key type: ${key.type}`);\n  }\n}\n",
    "static": true,
    "longname": "/c/Users/stas/Mozilla/fluent/fluent.js/fluent-syntax/src/serializer.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 231,
    "kind": "function",
    "name": "indent",
    "memberof": "src/serializer.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/serializer.js~indent",
    "access": "public",
    "export": false,
    "importPath": "@fluent/syntax/src/serializer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "params": [
      {
        "name": "content",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 232,
    "kind": "function",
    "name": "includesNewLine",
    "memberof": "src/serializer.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/serializer.js~includesNewLine",
    "access": "public",
    "export": false,
    "importPath": "@fluent/syntax/src/serializer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "params": [
      {
        "name": "elem",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 233,
    "kind": "function",
    "name": "isSelectExpr",
    "memberof": "src/serializer.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/serializer.js~isSelectExpr",
    "access": "public",
    "export": false,
    "importPath": "@fluent/syntax/src/serializer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "params": [
      {
        "name": "elem",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 234,
    "kind": "variable",
    "name": "HAS_ENTRIES",
    "memberof": "src/serializer.js",
    "static": true,
    "longname": "src/serializer.js~HAS_ENTRIES",
    "access": "public",
    "export": true,
    "importPath": "@fluent/syntax/src/serializer.js",
    "importStyle": "{HAS_ENTRIES}",
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 235,
    "kind": "class",
    "name": "FluentSerializer",
    "memberof": "src/serializer.js",
    "static": true,
    "longname": "src/serializer.js~FluentSerializer",
    "access": "public",
    "export": true,
    "importPath": "@fluent/syntax/src/serializer.js",
    "importStyle": "{FluentSerializer}",
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 236,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/serializer.js~FluentSerializer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/serializer.js~FluentSerializer#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 22,
    "undocument": true
  },
  {
    "__docId__": 237,
    "kind": "member",
    "name": "withJunk",
    "memberof": "src/serializer.js~FluentSerializer",
    "static": false,
    "longname": "src/serializer.js~FluentSerializer#withJunk",
    "access": "public",
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 238,
    "kind": "method",
    "name": "serialize",
    "memberof": "src/serializer.js~FluentSerializer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/serializer.js~FluentSerializer#serialize",
    "access": "public",
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "params": [
      {
        "name": "resource",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 239,
    "kind": "method",
    "name": "serializeEntry",
    "memberof": "src/serializer.js~FluentSerializer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/serializer.js~FluentSerializer#serializeEntry",
    "access": "public",
    "description": null,
    "lineNumber": 46,
    "undocument": true,
    "params": [
      {
        "name": "entry",
        "types": [
          "*"
        ]
      },
      {
        "name": "state",
        "optional": true,
        "types": [
          "number"
        ],
        "defaultRaw": 0,
        "defaultValue": "0"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 240,
    "kind": "function",
    "name": "serializeComment",
    "memberof": "src/serializer.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/serializer.js~serializeComment",
    "access": "public",
    "export": false,
    "importPath": "@fluent/syntax/src/serializer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 76,
    "undocument": true,
    "params": [
      {
        "name": "comment",
        "types": [
          "*"
        ]
      },
      {
        "name": "prefix",
        "optional": true,
        "types": [
          "string"
        ],
        "defaultRaw": "#",
        "defaultValue": "#"
      }
    ],
    "return": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 241,
    "kind": "function",
    "name": "serializeJunk",
    "memberof": "src/serializer.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/serializer.js~serializeJunk",
    "access": "public",
    "export": false,
    "importPath": "@fluent/syntax/src/serializer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 85,
    "undocument": true,
    "params": [
      {
        "name": "junk",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 242,
    "kind": "function",
    "name": "serializeMessage",
    "memberof": "src/serializer.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/serializer.js~serializeMessage",
    "access": "public",
    "export": false,
    "importPath": "@fluent/syntax/src/serializer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 90,
    "undocument": true,
    "params": [
      {
        "name": "message",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 243,
    "kind": "function",
    "name": "serializeTerm",
    "memberof": "src/serializer.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/serializer.js~serializeTerm",
    "access": "public",
    "export": false,
    "importPath": "@fluent/syntax/src/serializer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 112,
    "undocument": true,
    "params": [
      {
        "name": "term",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 244,
    "kind": "function",
    "name": "serializeAttribute",
    "memberof": "src/serializer.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/serializer.js~serializeAttribute",
    "access": "public",
    "export": false,
    "importPath": "@fluent/syntax/src/serializer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 131,
    "undocument": true,
    "params": [
      {
        "name": "attribute",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 245,
    "kind": "function",
    "name": "serializePattern",
    "memberof": "src/serializer.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/serializer.js~serializePattern",
    "access": "public",
    "export": false,
    "importPath": "@fluent/syntax/src/serializer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 137,
    "undocument": true,
    "params": [
      {
        "name": "pattern",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 246,
    "kind": "function",
    "name": "serializeElement",
    "memberof": "src/serializer.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/serializer.js~serializeElement",
    "access": "public",
    "export": false,
    "importPath": "@fluent/syntax/src/serializer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 151,
    "undocument": true,
    "params": [
      {
        "name": "element",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 247,
    "kind": "function",
    "name": "serializePlaceable",
    "memberof": "src/serializer.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/serializer.js~serializePlaceable",
    "access": "public",
    "export": false,
    "importPath": "@fluent/syntax/src/serializer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 163,
    "undocument": true,
    "params": [
      {
        "name": "placeable",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 248,
    "kind": "function",
    "name": "serializeExpression",
    "memberof": "src/serializer.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/serializer.js~serializeExpression",
    "access": "public",
    "export": true,
    "importPath": "@fluent/syntax/src/serializer.js",
    "importStyle": "{serializeExpression}",
    "description": null,
    "lineNumber": 179,
    "undocument": true,
    "params": [
      {
        "name": "expr",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 249,
    "kind": "function",
    "name": "serializeVariant",
    "memberof": "src/serializer.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/serializer.js~serializeVariant",
    "access": "public",
    "export": false,
    "importPath": "@fluent/syntax/src/serializer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 221,
    "undocument": true,
    "params": [
      {
        "name": "variant",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 250,
    "kind": "function",
    "name": "serializeCallArguments",
    "memberof": "src/serializer.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/serializer.js~serializeCallArguments",
    "access": "public",
    "export": false,
    "importPath": "@fluent/syntax/src/serializer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 233,
    "undocument": true,
    "params": [
      {
        "name": "expr",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 251,
    "kind": "function",
    "name": "serializeNamedArgument",
    "memberof": "src/serializer.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/serializer.js~serializeNamedArgument",
    "access": "public",
    "export": false,
    "importPath": "@fluent/syntax/src/serializer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 243,
    "undocument": true,
    "params": [
      {
        "name": "arg",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 252,
    "kind": "function",
    "name": "serializeVariantKey",
    "memberof": "src/serializer.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/serializer.js~serializeVariantKey",
    "access": "public",
    "export": true,
    "importPath": "@fluent/syntax/src/serializer.js",
    "importStyle": "{serializeVariantKey}",
    "description": null,
    "lineNumber": 250,
    "undocument": true,
    "params": [
      {
        "name": "key",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 253,
    "kind": "file",
    "name": "src/stream.js",
    "content": "/* eslint no-magic-numbers: \"off\" */\n\nimport { ParseError } from \"./errors\";\nimport { includes } from \"./util\";\n\nexport class ParserStream {\n  constructor(string) {\n    this.string = string;\n    this.index = 0;\n    this.peekOffset = 0;\n  }\n\n  charAt(offset) {\n    // When the cursor is at CRLF, return LF but don't move the cursor.\n    // The cursor still points to the EOL position, which in this case is the\n    // beginning of the compound CRLF sequence. This ensures slices of\n    // [inclusive, exclusive) continue to work properly.\n    if (this.string[offset] === \"\\r\"\n        && this.string[offset + 1] === \"\\n\") {\n      return \"\\n\";\n    }\n\n    return this.string[offset];\n  }\n\n  get currentChar() {\n    return this.charAt(this.index);\n  }\n\n  get currentPeek() {\n    return this.charAt(this.index + this.peekOffset);\n  }\n\n  next() {\n    this.peekOffset = 0;\n    // Skip over the CRLF as if it was a single character.\n    if (this.string[this.index] === \"\\r\"\n        && this.string[this.index + 1] === \"\\n\") {\n      this.index++;\n    }\n    this.index++;\n    return this.string[this.index];\n  }\n\n  peek() {\n    // Skip over the CRLF as if it was a single character.\n    if (this.string[this.index + this.peekOffset] === \"\\r\"\n        && this.string[this.index + this.peekOffset + 1] === \"\\n\") {\n      this.peekOffset++;\n    }\n    this.peekOffset++;\n    return this.string[this.index + this.peekOffset];\n  }\n\n  resetPeek(offset = 0) {\n    this.peekOffset = offset;\n  }\n\n  skipToPeek() {\n    this.index += this.peekOffset;\n    this.peekOffset = 0;\n  }\n}\n\nexport const EOL = \"\\n\";\nexport const EOF = undefined;\nconst SPECIAL_LINE_START_CHARS = [\"}\", \".\", \"[\", \"*\"];\n\nexport class FluentParserStream extends ParserStream {\n  peekBlankInline() {\n    const start = this.index + this.peekOffset;\n    while (this.currentPeek === \" \") {\n      this.peek();\n    }\n    return this.string.slice(start, this.index + this.peekOffset);\n  }\n\n  skipBlankInline() {\n    const blank = this.peekBlankInline();\n    this.skipToPeek();\n    return blank;\n  }\n\n  peekBlankBlock() {\n    let blank = \"\";\n    while (true) {\n      const lineStart = this.peekOffset;\n      this.peekBlankInline();\n      if (this.currentPeek === EOL) {\n        blank += EOL;\n        this.peek();\n        continue;\n      }\n      if (this.currentPeek === EOF) {\n        // Treat the blank line at EOF as a blank block.\n        return blank;\n      }\n      // Any other char; reset to column 1 on this line.\n      this.resetPeek(lineStart);\n      return blank;\n    }\n  }\n\n  skipBlankBlock() {\n    const blank = this.peekBlankBlock();\n    this.skipToPeek();\n    return blank;\n  }\n\n  peekBlank() {\n    while (this.currentPeek === \" \" || this.currentPeek === EOL) {\n      this.peek();\n    }\n  }\n\n  skipBlank() {\n    this.peekBlank();\n    this.skipToPeek();\n  }\n\n  expectChar(ch) {\n    if (this.currentChar === ch) {\n      this.next();\n      return true;\n    }\n\n    throw new ParseError(\"E0003\", ch);\n  }\n\n  expectLineEnd() {\n    if (this.currentChar === EOF) {\n      // EOF is a valid line end in Fluent.\n      return true;\n    }\n\n    if (this.currentChar === EOL) {\n      this.next();\n      return true;\n    }\n\n    // Unicode Character 'SYMBOL FOR NEWLINE' (U+2424)\n    throw new ParseError(\"E0003\", \"\\u2424\");\n  }\n\n  takeChar(f) {\n    const ch = this.currentChar;\n    if (ch === EOF) {\n      return EOF;\n    }\n    if (f(ch)) {\n      this.next();\n      return ch;\n    }\n    return null;\n  }\n\n  isCharIdStart(ch) {\n    if (ch === EOF) {\n      return false;\n    }\n\n    const cc = ch.charCodeAt(0);\n    return (cc >= 97 && cc <= 122) || // a-z\n           (cc >= 65 && cc <= 90); // A-Z\n  }\n\n  isIdentifierStart() {\n    return this.isCharIdStart(this.currentPeek);\n  }\n\n  isNumberStart() {\n    const ch = this.currentChar === \"-\"\n      ? this.peek()\n      : this.currentChar;\n\n    if (ch === EOF) {\n      this.resetPeek();\n      return false;\n    }\n\n    const cc = ch.charCodeAt(0);\n    const isDigit = cc >= 48 && cc <= 57; // 0-9\n    this.resetPeek();\n    return isDigit;\n  }\n\n  isCharPatternContinuation(ch) {\n    if (ch === EOF) {\n      return false;\n    }\n\n    return !includes(SPECIAL_LINE_START_CHARS, ch);\n  }\n\n  isValueStart() {\n    // Inline Patterns may start with any char.\n    const ch = this.currentPeek;\n    return ch !== EOL && ch !== EOF;\n  }\n\n  isValueContinuation() {\n    const column1 = this.peekOffset;\n    this.peekBlankInline();\n\n    if (this.currentPeek === \"{\") {\n      this.resetPeek(column1);\n      return true;\n    }\n\n    if (this.peekOffset - column1 === 0) {\n      return false;\n    }\n\n    if (this.isCharPatternContinuation(this.currentPeek)) {\n      this.resetPeek(column1);\n      return true;\n    }\n\n    return false;\n  }\n\n  // -1 - any\n  //  0 - comment\n  //  1 - group comment\n  //  2 - resource comment\n  isNextLineComment(level = -1) {\n    if (this.currentChar !== EOL) {\n      return false;\n    }\n\n    let i = 0;\n\n    while (i <= level || (level === -1 && i < 3)) {\n      if (this.peek() !== \"#\") {\n        if (i <= level && level !== -1) {\n          this.resetPeek();\n          return false;\n        }\n        break;\n      }\n      i++;\n    }\n\n    // The first char after #, ## or ###.\n    const ch = this.peek();\n    if (ch === \" \" || ch === EOL) {\n      this.resetPeek();\n      return true;\n    }\n\n    this.resetPeek();\n    return false;\n  }\n\n  isVariantStart() {\n    const currentPeekOffset = this.peekOffset;\n    if (this.currentPeek === \"*\") {\n      this.peek();\n    }\n    if (this.currentPeek === \"[\") {\n      this.resetPeek(currentPeekOffset);\n      return true;\n    }\n    this.resetPeek(currentPeekOffset);\n    return false;\n  }\n\n  isAttributeStart() {\n    return this.currentPeek === \".\";\n  }\n\n  skipToNextEntryStart(junkStart) {\n    let lastNewline = this.string.lastIndexOf(EOL, this.index);\n    if (junkStart < lastNewline) {\n      // Last seen newline is _after_ the junk start. It's safe to rewind\n      // without the risk of resuming at the same broken entry.\n      this.index = lastNewline;\n    }\n    while (this.currentChar) {\n      // We're only interested in beginnings of line.\n      if (this.currentChar !== EOL) {\n        this.next();\n        continue;\n      }\n\n      // Break if the first char in this line looks like an entry start.\n      const first = this.next();\n      if (this.isCharIdStart(first) || first === \"-\" || first === \"#\") {\n        break;\n      }\n    }\n  }\n\n  takeIDStart() {\n    if (this.isCharIdStart(this.currentChar)) {\n      const ret = this.currentChar;\n      this.next();\n      return ret;\n    }\n\n    throw new ParseError(\"E0004\", \"a-zA-Z\");\n  }\n\n  takeIDChar() {\n    const closure = ch => {\n      const cc = ch.charCodeAt(0);\n      return ((cc >= 97 && cc <= 122) || // a-z\n              (cc >= 65 && cc <= 90) || // A-Z\n              (cc >= 48 && cc <= 57) || // 0-9\n               cc === 95 || cc === 45); // _-\n    };\n\n    return this.takeChar(closure);\n  }\n\n  takeDigit() {\n    const closure = ch => {\n      const cc = ch.charCodeAt(0);\n      return (cc >= 48 && cc <= 57); // 0-9\n    };\n\n    return this.takeChar(closure);\n  }\n\n  takeHexDigit() {\n    const closure = ch => {\n      const cc = ch.charCodeAt(0);\n      return (cc >= 48 && cc <= 57) // 0-9\n        || (cc >= 65 && cc <= 70) // A-F\n        || (cc >= 97 && cc <= 102); // a-f\n    };\n\n    return this.takeChar(closure);\n  }\n}\n",
    "static": true,
    "longname": "/c/Users/stas/Mozilla/fluent/fluent.js/fluent-syntax/src/stream.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 254,
    "kind": "class",
    "name": "ParserStream",
    "memberof": "src/stream.js",
    "static": true,
    "longname": "src/stream.js~ParserStream",
    "access": "public",
    "export": true,
    "importPath": "@fluent/syntax/src/stream.js",
    "importStyle": "{ParserStream}",
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 255,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/stream.js~ParserStream",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/stream.js~ParserStream#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 7,
    "undocument": true
  },
  {
    "__docId__": 256,
    "kind": "member",
    "name": "string",
    "memberof": "src/stream.js~ParserStream",
    "static": false,
    "longname": "src/stream.js~ParserStream#string",
    "access": "public",
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 257,
    "kind": "member",
    "name": "index",
    "memberof": "src/stream.js~ParserStream",
    "static": false,
    "longname": "src/stream.js~ParserStream#index",
    "access": "public",
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 258,
    "kind": "member",
    "name": "peekOffset",
    "memberof": "src/stream.js~ParserStream",
    "static": false,
    "longname": "src/stream.js~ParserStream#peekOffset",
    "access": "public",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 259,
    "kind": "method",
    "name": "charAt",
    "memberof": "src/stream.js~ParserStream",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/stream.js~ParserStream#charAt",
    "access": "public",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "params": [
      {
        "name": "offset",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 260,
    "kind": "get",
    "name": "currentChar",
    "memberof": "src/stream.js~ParserStream",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/stream.js~ParserStream#currentChar",
    "access": "public",
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 261,
    "kind": "get",
    "name": "currentPeek",
    "memberof": "src/stream.js~ParserStream",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/stream.js~ParserStream#currentPeek",
    "access": "public",
    "description": null,
    "lineNumber": 30,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 262,
    "kind": "method",
    "name": "next",
    "memberof": "src/stream.js~ParserStream",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/stream.js~ParserStream#next",
    "access": "public",
    "description": null,
    "lineNumber": 34,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 264,
    "kind": "method",
    "name": "peek",
    "memberof": "src/stream.js~ParserStream",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/stream.js~ParserStream#peek",
    "access": "public",
    "description": null,
    "lineNumber": 45,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 265,
    "kind": "method",
    "name": "resetPeek",
    "memberof": "src/stream.js~ParserStream",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/stream.js~ParserStream#resetPeek",
    "access": "public",
    "description": null,
    "lineNumber": 55,
    "undocument": true,
    "params": [
      {
        "name": "offset",
        "optional": true,
        "types": [
          "number"
        ],
        "defaultRaw": 0,
        "defaultValue": "0"
      }
    ],
    "return": null
  },
  {
    "__docId__": 267,
    "kind": "method",
    "name": "skipToPeek",
    "memberof": "src/stream.js~ParserStream",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/stream.js~ParserStream#skipToPeek",
    "access": "public",
    "description": null,
    "lineNumber": 59,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 270,
    "kind": "variable",
    "name": "EOL",
    "memberof": "src/stream.js",
    "static": true,
    "longname": "src/stream.js~EOL",
    "access": "public",
    "export": true,
    "importPath": "@fluent/syntax/src/stream.js",
    "importStyle": "{EOL}",
    "description": null,
    "lineNumber": 65,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 271,
    "kind": "variable",
    "name": "EOF",
    "memberof": "src/stream.js",
    "static": true,
    "longname": "src/stream.js~EOF",
    "access": "public",
    "export": true,
    "importPath": "@fluent/syntax/src/stream.js",
    "importStyle": "{EOF}",
    "description": null,
    "lineNumber": 66,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 272,
    "kind": "variable",
    "name": "SPECIAL_LINE_START_CHARS",
    "memberof": "src/stream.js",
    "static": true,
    "longname": "src/stream.js~SPECIAL_LINE_START_CHARS",
    "access": "public",
    "export": false,
    "importPath": "@fluent/syntax/src/stream.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 67,
    "undocument": true,
    "type": {
      "types": [
        "string[]"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 273,
    "kind": "class",
    "name": "FluentParserStream",
    "memberof": "src/stream.js",
    "static": true,
    "longname": "src/stream.js~FluentParserStream",
    "access": "public",
    "export": true,
    "importPath": "@fluent/syntax/src/stream.js",
    "importStyle": "{FluentParserStream}",
    "description": null,
    "lineNumber": 69,
    "undocument": true,
    "interface": false,
    "extends": [
      "ParserStream"
    ]
  },
  {
    "__docId__": 274,
    "kind": "method",
    "name": "peekBlankInline",
    "memberof": "src/stream.js~FluentParserStream",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/stream.js~FluentParserStream#peekBlankInline",
    "access": "public",
    "description": null,
    "lineNumber": 70,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 275,
    "kind": "method",
    "name": "skipBlankInline",
    "memberof": "src/stream.js~FluentParserStream",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/stream.js~FluentParserStream#skipBlankInline",
    "access": "public",
    "description": null,
    "lineNumber": 78,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 276,
    "kind": "method",
    "name": "peekBlankBlock",
    "memberof": "src/stream.js~FluentParserStream",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/stream.js~FluentParserStream#peekBlankBlock",
    "access": "public",
    "description": null,
    "lineNumber": 84,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 277,
    "kind": "method",
    "name": "skipBlankBlock",
    "memberof": "src/stream.js~FluentParserStream",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/stream.js~FluentParserStream#skipBlankBlock",
    "access": "public",
    "description": null,
    "lineNumber": 104,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 278,
    "kind": "method",
    "name": "peekBlank",
    "memberof": "src/stream.js~FluentParserStream",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/stream.js~FluentParserStream#peekBlank",
    "access": "public",
    "description": null,
    "lineNumber": 110,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 279,
    "kind": "method",
    "name": "skipBlank",
    "memberof": "src/stream.js~FluentParserStream",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/stream.js~FluentParserStream#skipBlank",
    "access": "public",
    "description": null,
    "lineNumber": 116,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 280,
    "kind": "method",
    "name": "expectChar",
    "memberof": "src/stream.js~FluentParserStream",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/stream.js~FluentParserStream#expectChar",
    "access": "public",
    "description": null,
    "lineNumber": 121,
    "undocument": true,
    "params": [
      {
        "name": "ch",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 281,
    "kind": "method",
    "name": "expectLineEnd",
    "memberof": "src/stream.js~FluentParserStream",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/stream.js~FluentParserStream#expectLineEnd",
    "access": "public",
    "description": null,
    "lineNumber": 130,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 282,
    "kind": "method",
    "name": "takeChar",
    "memberof": "src/stream.js~FluentParserStream",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/stream.js~FluentParserStream#takeChar",
    "access": "public",
    "description": null,
    "lineNumber": 145,
    "undocument": true,
    "params": [
      {
        "name": "f",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 283,
    "kind": "method",
    "name": "isCharIdStart",
    "memberof": "src/stream.js~FluentParserStream",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/stream.js~FluentParserStream#isCharIdStart",
    "access": "public",
    "description": null,
    "lineNumber": 157,
    "undocument": true,
    "params": [
      {
        "name": "ch",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 284,
    "kind": "method",
    "name": "isIdentifierStart",
    "memberof": "src/stream.js~FluentParserStream",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/stream.js~FluentParserStream#isIdentifierStart",
    "access": "public",
    "description": null,
    "lineNumber": 167,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 285,
    "kind": "method",
    "name": "isNumberStart",
    "memberof": "src/stream.js~FluentParserStream",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/stream.js~FluentParserStream#isNumberStart",
    "access": "public",
    "description": null,
    "lineNumber": 171,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 286,
    "kind": "method",
    "name": "isCharPatternContinuation",
    "memberof": "src/stream.js~FluentParserStream",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/stream.js~FluentParserStream#isCharPatternContinuation",
    "access": "public",
    "description": null,
    "lineNumber": 187,
    "undocument": true,
    "params": [
      {
        "name": "ch",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 287,
    "kind": "method",
    "name": "isValueStart",
    "memberof": "src/stream.js~FluentParserStream",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/stream.js~FluentParserStream#isValueStart",
    "access": "public",
    "description": null,
    "lineNumber": 195,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 288,
    "kind": "method",
    "name": "isValueContinuation",
    "memberof": "src/stream.js~FluentParserStream",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/stream.js~FluentParserStream#isValueContinuation",
    "access": "public",
    "description": null,
    "lineNumber": 201,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 289,
    "kind": "method",
    "name": "isNextLineComment",
    "memberof": "src/stream.js~FluentParserStream",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/stream.js~FluentParserStream#isNextLineComment",
    "access": "public",
    "description": null,
    "lineNumber": 226,
    "undocument": true,
    "params": [
      {
        "name": "level",
        "optional": true,
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 290,
    "kind": "method",
    "name": "isVariantStart",
    "memberof": "src/stream.js~FluentParserStream",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/stream.js~FluentParserStream#isVariantStart",
    "access": "public",
    "description": null,
    "lineNumber": 255,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 291,
    "kind": "method",
    "name": "isAttributeStart",
    "memberof": "src/stream.js~FluentParserStream",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/stream.js~FluentParserStream#isAttributeStart",
    "access": "public",
    "description": null,
    "lineNumber": 268,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 292,
    "kind": "method",
    "name": "skipToNextEntryStart",
    "memberof": "src/stream.js~FluentParserStream",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/stream.js~FluentParserStream#skipToNextEntryStart",
    "access": "public",
    "description": null,
    "lineNumber": 272,
    "undocument": true,
    "params": [
      {
        "name": "junkStart",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 293,
    "kind": "member",
    "name": "index",
    "memberof": "src/stream.js~FluentParserStream",
    "static": false,
    "longname": "src/stream.js~FluentParserStream#index",
    "access": "public",
    "description": null,
    "lineNumber": 277,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 294,
    "kind": "method",
    "name": "takeIDStart",
    "memberof": "src/stream.js~FluentParserStream",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/stream.js~FluentParserStream#takeIDStart",
    "access": "public",
    "description": null,
    "lineNumber": 294,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 295,
    "kind": "method",
    "name": "takeIDChar",
    "memberof": "src/stream.js~FluentParserStream",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/stream.js~FluentParserStream#takeIDChar",
    "access": "public",
    "description": null,
    "lineNumber": 304,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 296,
    "kind": "method",
    "name": "takeDigit",
    "memberof": "src/stream.js~FluentParserStream",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/stream.js~FluentParserStream#takeDigit",
    "access": "public",
    "description": null,
    "lineNumber": 316,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 297,
    "kind": "method",
    "name": "takeHexDigit",
    "memberof": "src/stream.js~FluentParserStream",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/stream.js~FluentParserStream#takeHexDigit",
    "access": "public",
    "description": null,
    "lineNumber": 325,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 298,
    "kind": "file",
    "name": "src/util.js",
    "content": "export function includes(arr, elem) {\n  return arr.indexOf(elem) > -1;\n}\n",
    "static": true,
    "longname": "/c/Users/stas/Mozilla/fluent/fluent.js/fluent-syntax/src/util.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 299,
    "kind": "function",
    "name": "includes",
    "memberof": "src/util.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/util.js~includes",
    "access": "public",
    "export": true,
    "importPath": "@fluent/syntax/src/util.js",
    "importStyle": "{includes}",
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "params": [
      {
        "name": "arr",
        "types": [
          "*"
        ]
      },
      {
        "name": "elem",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 300,
    "kind": "file",
    "name": "src/visitor.js",
    "content": "import { BaseNode } from \"./ast\";\n\n/*\n * Abstract Visitor pattern\n */\nexport class Visitor {\n  visit(node) {\n    if (Array.isArray(node)) {\n      node.forEach(child => this.visit(child));\n      return;\n    }\n    if (!(node instanceof BaseNode)) {\n      return;\n    }\n    const visit = this[`visit${node.type}`] || this.genericVisit;\n    visit.call(this, node);\n  }\n\n  genericVisit(node) {\n    for (const propname of Object.keys(node)) {\n      this.visit(node[propname]);\n    }\n  }\n}\n\n/*\n * Abstract Transformer pattern\n */\nexport class Transformer extends Visitor {\n  visit(node) {\n    if (!(node instanceof BaseNode)) {\n      return node;\n    }\n    const visit = this[`visit${node.type}`] || this.genericVisit;\n    return visit.call(this, node);\n  }\n\n  genericVisit(node) {\n    for (const propname of Object.keys(node)) {\n      const propvalue = node[propname];\n      if (Array.isArray(propvalue)) {\n        const newvals = propvalue\n          .map(child => this.visit(child))\n          .filter(newchild => newchild !== undefined);\n        node[propname] = newvals;\n      }\n      if (propvalue instanceof BaseNode) {\n        const new_val = this.visit(propvalue);\n        if (new_val === undefined) {\n          delete node[propname];\n        } else {\n          node[propname] = new_val;\n        }\n      }\n    }\n    return node;\n  }\n}\n",
    "static": true,
    "longname": "/c/Users/stas/Mozilla/fluent/fluent.js/fluent-syntax/src/visitor.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 301,
    "kind": "class",
    "name": "Visitor",
    "memberof": "src/visitor.js",
    "static": true,
    "longname": "src/visitor.js~Visitor",
    "access": "public",
    "export": true,
    "importPath": "@fluent/syntax/src/visitor.js",
    "importStyle": "{Visitor}",
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 302,
    "kind": "method",
    "name": "visit",
    "memberof": "src/visitor.js~Visitor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/visitor.js~Visitor#visit",
    "access": "public",
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "params": [
      {
        "name": "node",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 303,
    "kind": "method",
    "name": "genericVisit",
    "memberof": "src/visitor.js~Visitor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/visitor.js~Visitor#genericVisit",
    "access": "public",
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "params": [
      {
        "name": "node",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 304,
    "kind": "class",
    "name": "Transformer",
    "memberof": "src/visitor.js",
    "static": true,
    "longname": "src/visitor.js~Transformer",
    "access": "public",
    "export": true,
    "importPath": "@fluent/syntax/src/visitor.js",
    "importStyle": "{Transformer}",
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "interface": false,
    "extends": [
      "Visitor"
    ]
  },
  {
    "__docId__": 305,
    "kind": "method",
    "name": "visit",
    "memberof": "src/visitor.js~Transformer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/visitor.js~Transformer#visit",
    "access": "public",
    "description": null,
    "lineNumber": 30,
    "undocument": true,
    "params": [
      {
        "name": "node",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 306,
    "kind": "method",
    "name": "genericVisit",
    "memberof": "src/visitor.js~Transformer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/visitor.js~Transformer#genericVisit",
    "access": "public",
    "description": null,
    "lineNumber": 38,
    "undocument": true,
    "params": [
      {
        "name": "node",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "index",
    "content": "# @fluent/syntax\n\n`@fluent/syntax` is a parser for Fluent translation files, FTL. Project\nFluent is a localization framework designed to unleash the expressive power\nof the natural language.\n\n\n## Installation\n\n`@fluent/syntax` can be used both on the client-side and the server-side. You\ncan install it from the npm registry or use it as a standalone script (as the\n`FluentSyntax` global).\n\n    npm install @fluent/syntax\n\n\n## How to use\n\n```javascript\nimport {parse, Resource} from \"@fluent/syntax\";\n\nconst res = parse(`\n-brand-name = Foo 3000\nwelcome = Welcome, {$name}, to {-brand-name}!\n`);\n\nassert(res instanceof Resource);\n```\n\nThe API reference is available at https://projectfluent.org/fluent.js/syntax.\n\n\n## Compatibility\n\nFor legacy browsers, the `compat` build has been transpiled using Babel's [env\npreset][]:\n\n```javascript\nimport \"@fluent/syntax/compat\";\n```\n\n\n## Learn more\n\nFind out more about Project Fluent at [projectfluent.org][], including\ndocumentation of the Fluent file format ([FTL][]), links to other packages and\nimplementations, and information about how to get involved.\n\n\n[env preset]: https://babeljs.io/docs/plugins/preset-env/\n[projectfluent.org]: https://projectfluent.org\n[FTL]: https://projectfluent.org/fluent/guide/\n",
    "longname": "/c/Users/stas/Mozilla/fluent/fluent.js/fluent-syntax/README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "packageJSON",
    "content": "{\n  \"name\": \"@fluent/syntax\",\n  \"description\": \"AST and parser for Fluent\",\n  \"version\": \"0.14.0\",\n  \"homepage\": \"https://projectfluent.org\",\n  \"author\": \"Mozilla <l10n-drivers@mozilla.org>\",\n  \"license\": \"Apache-2.0\",\n  \"contributors\": [\n    {\n      \"name\": \"Zibi Braniecki\",\n      \"email\": \"zbraniecki@mozilla.com\"\n    },\n    {\n      \"name\": \"Staś Małolepszy\",\n      \"email\": \"stas@mozilla.com\"\n    }\n  ],\n  \"directories\": {\n    \"lib\": \"./src\"\n  },\n  \"main\": \"./index.js\",\n  \"module\": \"./src/index.js\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/projectfluent/fluent.js.git\"\n  },\n  \"keywords\": [\n    \"localization\",\n    \"l10n\",\n    \"internationalization\",\n    \"i18n\",\n    \"ftl\",\n    \"plural\",\n    \"gender\",\n    \"locale\",\n    \"language\",\n    \"formatting\",\n    \"translate\",\n    \"translation\",\n    \"format\",\n    \"ast\",\n    \"serializer\",\n    \"parser\"\n  ],\n  \"engines\": {\n    \"node\": \">=10.0.0\"\n  },\n  \"devDependencies\": {\n    \"@fluent/dedent\": \"^0.1.0\"\n  }\n}\n",
    "longname": "/c/Users/stas/Mozilla/fluent/fluent.js/fluent-syntax/package.json",
    "name": "package.json",
    "static": true,
    "access": "public"
  }
]