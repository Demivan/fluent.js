[
  {
    "__docId__": 1,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Infinity",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 2,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~NaN",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 3,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~undefined",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 4,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~null",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 5,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 6,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 7,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 8,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 9,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 10,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 11,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Symbol",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 12,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Error",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 13,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~EvalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 14,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~InternalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 15,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RangeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 16,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ReferenceError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 17,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~SyntaxError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 18,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~TypeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 19,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~URIError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 20,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 21,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 22,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Date",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 23,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~String",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 24,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~string",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 25,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RegExp",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 26,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 27,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 28,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 29,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8ClampedArray",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 30,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 31,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 32,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 33,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 34,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 35,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float64Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 36,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Map",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 37,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Set",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 38,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakMap",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 39,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakSet",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 40,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ArrayBuffer",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 41,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~DataView",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 42,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~JSON",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 43,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Promise",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 44,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Generator",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 45,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~GeneratorFunction",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 46,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Reflect",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 47,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Proxy",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 48,
    "kind": "file",
    "name": "src/dom_localization.js",
    "content": "import translateElement from \"./overlay\";\nimport Localization from \"./localization\";\n\nconst L10NID_ATTR_NAME = \"data-l10n-id\";\nconst L10NARGS_ATTR_NAME = \"data-l10n-args\";\n\nconst L10N_ELEMENT_QUERY = `[${L10NID_ATTR_NAME}]`;\n\n/**\n * The `DOMLocalization` class is responsible for fetching resources and\n * formatting translations.\n *\n * It implements the fallback strategy in case of errors encountered during the\n * formatting of translations and methods for observing DOM\n * trees with a `MutationObserver`.\n */\nexport default class DOMLocalization extends Localization {\n  /**\n   * @param {Array<String>}    resourceIds     - List of resource IDs\n   * @param {Function}         generateBundles - Function that returns a\n   *                                             generator over FluentBundles\n   * @returns {DOMLocalization}\n   */\n  constructor(resourceIds, generateBundles) {\n    super(resourceIds, generateBundles);\n\n    // A Set of DOM trees observed by the `MutationObserver`.\n    this.roots = new Set();\n    // requestAnimationFrame handler.\n    this.pendingrAF = null;\n    // list of elements pending for translation.\n    this.pendingElements = new Set();\n    this.windowElement = null;\n    this.mutationObserver = null;\n\n    this.observerConfig = {\n      attributes: true,\n      characterData: false,\n      childList: true,\n      subtree: true,\n      attributeFilter: [L10NID_ATTR_NAME, L10NARGS_ATTR_NAME]\n    };\n  }\n\n  onChange(eager = false) {\n    super.onChange(eager);\n    if (this.roots) {\n      this.translateRoots();\n    }\n  }\n\n  /**\n   * Set the `data-l10n-id` and `data-l10n-args` attributes on DOM elements.\n   * FluentDOM makes use of mutation observers to detect changes\n   * to `data-l10n-*` attributes and translate elements asynchronously.\n   * `setAttributes` is a convenience method which allows to translate\n   * DOM elements declaratively.\n   *\n   * You should always prefer to use `data-l10n-id` on elements (statically in\n   * HTML or dynamically via `setAttributes`) over manually retrieving\n   * translations with `format`.  The use of attributes ensures that the\n   * elements can be retranslated when the user changes their language\n   * preferences.\n   *\n   * ```javascript\n   * localization.setAttributes(\n   *   document.querySelector('#welcome'), 'hello', { who: 'world' }\n   * );\n   * ```\n   *\n   * This will set the following attributes on the `#welcome` element.\n   * The MutationObserver will pick up this change and will localize the element\n   * asynchronously.\n   *\n   * ```html\n   * <p id='welcome'\n   *   data-l10n-id='hello'\n   *   data-l10n-args='{\"who\": \"world\"}'>\n   * </p>\n   * ```\n   *\n   * @param {Element}                element - Element to set attributes on\n   * @param {string}                 id      - l10n-id string\n   * @param {Object<string, string>} args    - KVP list of l10n arguments\n   * @returns {Element}\n   */\n  setAttributes(element, id, args) {\n    element.setAttribute(L10NID_ATTR_NAME, id);\n    if (args) {\n      element.setAttribute(L10NARGS_ATTR_NAME, JSON.stringify(args));\n    } else {\n      element.removeAttribute(L10NARGS_ATTR_NAME);\n    }\n    return element;\n  }\n\n  /**\n   * Get the `data-l10n-*` attributes from DOM elements.\n   *\n   * ```javascript\n   * localization.getAttributes(\n   *   document.querySelector('#welcome')\n   * );\n   * // -> { id: 'hello', args: { who: 'world' } }\n   * ```\n   *\n   * @param   {Element}  element - HTML element\n   * @returns {{id: string, args: Object}}\n   */\n  getAttributes(element) {\n    return {\n      id: element.getAttribute(L10NID_ATTR_NAME),\n      args: JSON.parse(element.getAttribute(L10NARGS_ATTR_NAME) || null)\n    };\n  }\n\n  /**\n   * Add `newRoot` to the list of roots managed by this `DOMLocalization`.\n   *\n   * Additionally, if this `DOMLocalization` has an observer, start observing\n   * `newRoot` in order to translate mutations in it.\n   *\n   * @param {Element}      newRoot - Root to observe.\n   */\n  connectRoot(newRoot) {\n    for (const root of this.roots) {\n      if (root === newRoot ||\n          root.contains(newRoot) ||\n          newRoot.contains(root)) {\n        throw new Error(\"Cannot add a root that overlaps with existing root.\");\n      }\n    }\n\n    if (this.windowElement) {\n      if (this.windowElement !== newRoot.ownerDocument.defaultView) {\n        throw new Error(`Cannot connect a root:\n          DOMLocalization already has a root from a different window.`);\n      }\n    } else {\n      this.windowElement = newRoot.ownerDocument.defaultView;\n      this.mutationObserver = new this.windowElement.MutationObserver(\n        mutations => this.translateMutations(mutations)\n      );\n    }\n\n\n    this.roots.add(newRoot);\n    this.mutationObserver.observe(newRoot, this.observerConfig);\n  }\n\n  /**\n   * Remove `root` from the list of roots managed by this `DOMLocalization`.\n   *\n   * Additionally, if this `DOMLocalization` has an observer, stop observing\n   * `root`.\n   *\n   * Returns `true` if the root was the last one managed by this\n   * `DOMLocalization`.\n   *\n   * @param   {Element} root - Root to disconnect.\n   * @returns {boolean}\n   */\n  disconnectRoot(root) {\n    this.roots.delete(root);\n    // Pause the mutation observer to stop observing `root`.\n    this.pauseObserving();\n\n    if (this.roots.size === 0) {\n      this.mutationObserver = null;\n      this.windowElement = null;\n      this.pendingrAF = null;\n      this.pendingElements.clear();\n      return true;\n    }\n\n    // Resume observing all other roots.\n    this.resumeObserving();\n    return false;\n  }\n\n  /**\n   * Translate all roots associated with this `DOMLocalization`.\n   *\n   * @returns {Promise}\n   */\n  translateRoots() {\n    const roots = Array.from(this.roots);\n    return Promise.all(\n      roots.map(root => this.translateFragment(root))\n    );\n  }\n\n  /**\n   * Pauses the `MutationObserver`.\n   *\n   * @private\n   */\n  pauseObserving() {\n    if (!this.mutationObserver) {\n      return;\n    }\n\n    this.translateMutations(this.mutationObserver.takeRecords());\n    this.mutationObserver.disconnect();\n  }\n\n  /**\n   * Resumes the `MutationObserver`.\n   *\n   * @private\n   */\n  resumeObserving() {\n    if (!this.mutationObserver) {\n      return;\n    }\n\n    for (const root of this.roots) {\n      this.mutationObserver.observe(root, this.observerConfig);\n    }\n  }\n\n  /**\n   * Translate mutations detected by the `MutationObserver`.\n   *\n   * @private\n   */\n  translateMutations(mutations) {\n    for (const mutation of mutations) {\n      switch (mutation.type) {\n        case \"attributes\":\n          if (mutation.target.hasAttribute(\"data-l10n-id\")) {\n            this.pendingElements.add(mutation.target);\n          }\n          break;\n        case \"childList\":\n          for (const addedNode of mutation.addedNodes) {\n            if (addedNode.nodeType === addedNode.ELEMENT_NODE) {\n              if (addedNode.childElementCount) {\n                for (const element of this.getTranslatables(addedNode)) {\n                  this.pendingElements.add(element);\n                }\n              } else if (addedNode.hasAttribute(L10NID_ATTR_NAME)) {\n                this.pendingElements.add(addedNode);\n              }\n            }\n          }\n          break;\n      }\n    }\n\n    // This fragment allows us to coalesce all pending translations\n    // into a single requestAnimationFrame.\n    if (this.pendingElements.size > 0) {\n      if (this.pendingrAF === null) {\n        this.pendingrAF = this.windowElement.requestAnimationFrame(() => {\n          this.translateElements(Array.from(this.pendingElements));\n          this.pendingElements.clear();\n          this.pendingrAF = null;\n        });\n      }\n    }\n  }\n\n  /**\n   * Translate a DOM element or fragment asynchronously using this\n   * `DOMLocalization` object.\n   *\n   * Manually trigger the translation (or re-translation) of a DOM fragment.\n   * Use the `data-l10n-id` and `data-l10n-args` attributes to mark up the DOM\n   * with information about which translations to use.\n   *\n   * Returns a `Promise` that gets resolved once the translation is complete.\n   *\n   * @param   {DOMFragment} frag - Element or DocumentFragment to be translated\n   * @returns {Promise}\n   */\n  translateFragment(frag) {\n    return this.translateElements(this.getTranslatables(frag));\n  }\n\n  /**\n   * Translate a list of DOM elements asynchronously using this\n   * `DOMLocalization` object.\n   *\n   * Manually trigger the translation (or re-translation) of a list of elements.\n   * Use the `data-l10n-id` and `data-l10n-args` attributes to mark up the DOM\n   * with information about which translations to use.\n   *\n   * Returns a `Promise` that gets resolved once the translation is complete.\n   *\n   * @param   {Array<Element>} elements - List of elements to be translated\n   * @returns {Promise}\n   */\n  async translateElements(elements) {\n    if (!elements.length) {\n      return undefined;\n    }\n\n    const keys = elements.map(this.getKeysForElement);\n    const translations = await this.formatMessages(keys);\n    return this.applyTranslations(elements, translations);\n  }\n\n  /**\n   * Applies translations onto elements.\n   *\n   * @param {Array<Element>} elements\n   * @param {Array<Object>}  translations\n   * @private\n   */\n  applyTranslations(elements, translations) {\n    this.pauseObserving();\n\n    for (let i = 0; i < elements.length; i++) {\n      if (translations[i] !== undefined) {\n        translateElement(elements[i], translations[i]);\n      }\n    }\n\n    this.resumeObserving();\n  }\n\n  /**\n   * Collects all translatable child elements of the element.\n   *\n   * @param {Element} element\n   * @returns {Array<Element>}\n   * @private\n   */\n  getTranslatables(element) {\n    const nodes = Array.from(element.querySelectorAll(L10N_ELEMENT_QUERY));\n\n    if (typeof element.hasAttribute === \"function\" &&\n        element.hasAttribute(L10NID_ATTR_NAME)) {\n      nodes.push(element);\n    }\n\n    return nodes;\n  }\n\n  /**\n   * Get the `data-l10n-*` attributes from DOM elements as a two-element\n   * array.\n   *\n   * @param {Element} element\n   * @returns {Object}\n   * @private\n   */\n  getKeysForElement(element) {\n    return {\n      id: element.getAttribute(L10NID_ATTR_NAME),\n      args: JSON.parse(element.getAttribute(L10NARGS_ATTR_NAME) || null)\n    };\n  }\n}\n",
    "static": true,
    "longname": "/c/Users/Stas/Mozilla/fluent/fluent.js/fluent-dom/src/dom_localization.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 49,
    "kind": "variable",
    "name": "L10NID_ATTR_NAME",
    "memberof": "src/dom_localization.js",
    "static": true,
    "longname": "src/dom_localization.js~L10NID_ATTR_NAME",
    "access": "public",
    "export": false,
    "importPath": "@fluent/dom/src/dom_localization.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 50,
    "kind": "variable",
    "name": "L10NARGS_ATTR_NAME",
    "memberof": "src/dom_localization.js",
    "static": true,
    "longname": "src/dom_localization.js~L10NARGS_ATTR_NAME",
    "access": "public",
    "export": false,
    "importPath": "@fluent/dom/src/dom_localization.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 51,
    "kind": "variable",
    "name": "L10N_ELEMENT_QUERY",
    "memberof": "src/dom_localization.js",
    "static": true,
    "longname": "src/dom_localization.js~L10N_ELEMENT_QUERY",
    "access": "public",
    "export": false,
    "importPath": "@fluent/dom/src/dom_localization.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 52,
    "kind": "class",
    "name": "DOMLocalization",
    "memberof": "src/dom_localization.js",
    "static": true,
    "longname": "src/dom_localization.js~DOMLocalization",
    "access": "public",
    "export": true,
    "importPath": "@fluent/dom/src/dom_localization.js",
    "importStyle": "DOMLocalization",
    "description": "The `DOMLocalization` class is responsible for fetching resources and\nformatting translations.\n\nIt implements the fallback strategy in case of errors encountered during the\nformatting of translations and methods for observing DOM\ntrees with a `MutationObserver`.",
    "lineNumber": 17,
    "interface": false,
    "extends": [
      "src/localization.js~Localization"
    ]
  },
  {
    "__docId__": 53,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/dom_localization.js~DOMLocalization",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/dom_localization.js~DOMLocalization#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 24,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{DOMLocalization}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<String>"
        ],
        "spread": false,
        "optional": false,
        "name": "resourceIds",
        "description": "List of resource IDs"
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "generateBundles",
        "description": "Function that returns a\n                                            generator over FluentBundles"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "DOMLocalization"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 54,
    "kind": "member",
    "name": "roots",
    "memberof": "src/dom_localization.js~DOMLocalization",
    "static": false,
    "longname": "src/dom_localization.js~DOMLocalization#roots",
    "access": "public",
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 55,
    "kind": "member",
    "name": "pendingrAF",
    "memberof": "src/dom_localization.js~DOMLocalization",
    "static": false,
    "longname": "src/dom_localization.js~DOMLocalization#pendingrAF",
    "access": "public",
    "description": null,
    "lineNumber": 30,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 56,
    "kind": "member",
    "name": "pendingElements",
    "memberof": "src/dom_localization.js~DOMLocalization",
    "static": false,
    "longname": "src/dom_localization.js~DOMLocalization#pendingElements",
    "access": "public",
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 57,
    "kind": "member",
    "name": "windowElement",
    "memberof": "src/dom_localization.js~DOMLocalization",
    "static": false,
    "longname": "src/dom_localization.js~DOMLocalization#windowElement",
    "access": "public",
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 58,
    "kind": "member",
    "name": "mutationObserver",
    "memberof": "src/dom_localization.js~DOMLocalization",
    "static": false,
    "longname": "src/dom_localization.js~DOMLocalization#mutationObserver",
    "access": "public",
    "description": null,
    "lineNumber": 34,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 59,
    "kind": "member",
    "name": "observerConfig",
    "memberof": "src/dom_localization.js~DOMLocalization",
    "static": false,
    "longname": "src/dom_localization.js~DOMLocalization#observerConfig",
    "access": "public",
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "type": {
      "types": [
        "{\"attributes\": boolean, \"characterData\": *, \"childList\": boolean, \"subtree\": boolean, \"attributeFilter\": *}"
      ]
    }
  },
  {
    "__docId__": 60,
    "kind": "method",
    "name": "onChange",
    "memberof": "src/dom_localization.js~DOMLocalization",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/dom_localization.js~DOMLocalization#onChange",
    "access": "public",
    "description": null,
    "lineNumber": 45,
    "undocument": true,
    "params": [
      {
        "name": "eager",
        "optional": true,
        "types": [
          "boolean"
        ],
        "defaultRaw": false,
        "defaultValue": "false"
      }
    ],
    "return": null
  },
  {
    "__docId__": 61,
    "kind": "method",
    "name": "setAttributes",
    "memberof": "src/dom_localization.js~DOMLocalization",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/dom_localization.js~DOMLocalization#setAttributes",
    "access": "public",
    "description": "Set the `data-l10n-id` and `data-l10n-args` attributes on DOM elements.\nFluentDOM makes use of mutation observers to detect changes\nto `data-l10n-*` attributes and translate elements asynchronously.\n`setAttributes` is a convenience method which allows to translate\nDOM elements declaratively.\n\nYou should always prefer to use `data-l10n-id` on elements (statically in\nHTML or dynamically via `setAttributes`) over manually retrieving\ntranslations with `format`.  The use of attributes ensures that the\nelements can be retranslated when the user changes their language\npreferences.\n\n```javascript\nlocalization.setAttributes(\n  document.querySelector('#welcome'), 'hello', { who: 'world' }\n);\n```\n\nThis will set the following attributes on the `#welcome` element.\nThe MutationObserver will pick up this change and will localize the element\nasynchronously.\n\n```html\n<p id='welcome'\n  data-l10n-id='hello'\n  data-l10n-args='{\"who\": \"world\"}'>\n</p>\n```",
    "lineNumber": 87,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Element}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Element"
        ],
        "spread": false,
        "optional": false,
        "name": "element",
        "description": "Element to set attributes on"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": "l10n-id string"
      },
      {
        "nullable": null,
        "types": [
          "Object<string, string>"
        ],
        "spread": false,
        "optional": false,
        "name": "args",
        "description": "KVP list of l10n arguments"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Element"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 62,
    "kind": "method",
    "name": "getAttributes",
    "memberof": "src/dom_localization.js~DOMLocalization",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/dom_localization.js~DOMLocalization#getAttributes",
    "access": "public",
    "description": "Get the `data-l10n-*` attributes from DOM elements.\n\n```javascript\nlocalization.getAttributes(\n  document.querySelector('#welcome')\n);\n// -> { id: 'hello', args: { who: 'world' } }\n```",
    "lineNumber": 110,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{{id: string, args: Object}}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Element"
        ],
        "spread": false,
        "optional": false,
        "name": "element",
        "description": "HTML element"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "{id: string, args: Object}"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 63,
    "kind": "method",
    "name": "connectRoot",
    "memberof": "src/dom_localization.js~DOMLocalization",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/dom_localization.js~DOMLocalization#connectRoot",
    "access": "public",
    "description": "Add `newRoot` to the list of roots managed by this `DOMLocalization`.\n\nAdditionally, if this `DOMLocalization` has an observer, start observing\n`newRoot` in order to translate mutations in it.",
    "lineNumber": 125,
    "params": [
      {
        "nullable": null,
        "types": [
          "Element"
        ],
        "spread": false,
        "optional": false,
        "name": "newRoot",
        "description": "Root to observe."
      }
    ],
    "return": null
  },
  {
    "__docId__": 66,
    "kind": "method",
    "name": "disconnectRoot",
    "memberof": "src/dom_localization.js~DOMLocalization",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/dom_localization.js~DOMLocalization#disconnectRoot",
    "access": "public",
    "description": "Remove `root` from the list of roots managed by this `DOMLocalization`.\n\nAdditionally, if this `DOMLocalization` has an observer, stop observing\n`root`.\n\nReturns `true` if the root was the last one managed by this\n`DOMLocalization`.",
    "lineNumber": 163,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Element"
        ],
        "spread": false,
        "optional": false,
        "name": "root",
        "description": "Root to disconnect."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 70,
    "kind": "method",
    "name": "translateRoots",
    "memberof": "src/dom_localization.js~DOMLocalization",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/dom_localization.js~DOMLocalization#translateRoots",
    "access": "public",
    "description": "Translate all roots associated with this `DOMLocalization`.",
    "lineNumber": 186,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 71,
    "kind": "method",
    "name": "pauseObserving",
    "memberof": "src/dom_localization.js~DOMLocalization",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/dom_localization.js~DOMLocalization#pauseObserving",
    "access": "private",
    "description": "Pauses the `MutationObserver`.",
    "lineNumber": 198,
    "params": [],
    "return": null
  },
  {
    "__docId__": 72,
    "kind": "method",
    "name": "resumeObserving",
    "memberof": "src/dom_localization.js~DOMLocalization",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/dom_localization.js~DOMLocalization#resumeObserving",
    "access": "private",
    "description": "Resumes the `MutationObserver`.",
    "lineNumber": 212,
    "params": [],
    "return": null
  },
  {
    "__docId__": 73,
    "kind": "method",
    "name": "translateMutations",
    "memberof": "src/dom_localization.js~DOMLocalization",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/dom_localization.js~DOMLocalization#translateMutations",
    "access": "private",
    "description": "Translate mutations detected by the `MutationObserver`.",
    "lineNumber": 227,
    "params": [
      {
        "name": "mutations",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 76,
    "kind": "method",
    "name": "translateFragment",
    "memberof": "src/dom_localization.js~DOMLocalization",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/dom_localization.js~DOMLocalization#translateFragment",
    "access": "public",
    "description": "Translate a DOM element or fragment asynchronously using this\n`DOMLocalization` object.\n\nManually trigger the translation (or re-translation) of a DOM fragment.\nUse the `data-l10n-id` and `data-l10n-args` attributes to mark up the DOM\nwith information about which translations to use.\n\nReturns a `Promise` that gets resolved once the translation is complete.",
    "lineNumber": 277,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "DOMFragment"
        ],
        "spread": false,
        "optional": false,
        "name": "frag",
        "description": "Element or DocumentFragment to be translated"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 77,
    "kind": "method",
    "name": "translateElements",
    "memberof": "src/dom_localization.js~DOMLocalization",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/dom_localization.js~DOMLocalization#translateElements",
    "access": "public",
    "description": "Translate a list of DOM elements asynchronously using this\n`DOMLocalization` object.\n\nManually trigger the translation (or re-translation) of a list of elements.\nUse the `data-l10n-id` and `data-l10n-args` attributes to mark up the DOM\nwith information about which translations to use.\n\nReturns a `Promise` that gets resolved once the translation is complete.",
    "lineNumber": 294,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<Element>"
        ],
        "spread": false,
        "optional": false,
        "name": "elements",
        "description": "List of elements to be translated"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 78,
    "kind": "method",
    "name": "applyTranslations",
    "memberof": "src/dom_localization.js~DOMLocalization",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/dom_localization.js~DOMLocalization#applyTranslations",
    "access": "private",
    "description": "Applies translations onto elements.",
    "lineNumber": 311,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<Element>"
        ],
        "spread": false,
        "optional": false,
        "name": "elements",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Array<Object>"
        ],
        "spread": false,
        "optional": false,
        "name": "translations",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 79,
    "kind": "method",
    "name": "getTranslatables",
    "memberof": "src/dom_localization.js~DOMLocalization",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/dom_localization.js~DOMLocalization#getTranslatables",
    "access": "private",
    "description": "Collects all translatable child elements of the element.",
    "lineNumber": 330,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<Element>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Element"
        ],
        "spread": false,
        "optional": false,
        "name": "element",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<Element>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 80,
    "kind": "method",
    "name": "getKeysForElement",
    "memberof": "src/dom_localization.js~DOMLocalization",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/dom_localization.js~DOMLocalization#getKeysForElement",
    "access": "private",
    "description": "Get the `data-l10n-*` attributes from DOM elements as a two-element\narray.",
    "lineNumber": 349,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Element"
        ],
        "spread": false,
        "optional": false,
        "name": "element",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 81,
    "kind": "file",
    "name": "src/index.js",
    "content": "export { default as DOMLocalization } from \"./dom_localization\";\nexport { default as Localization } from \"./localization\";\n",
    "static": true,
    "longname": "/c/Users/Stas/Mozilla/fluent/fluent.js/fluent-dom/src/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 82,
    "kind": "file",
    "name": "src/localization.js",
    "content": "/* eslint no-console: [\"error\", { allow: [\"warn\", \"error\"] }] */\n/* global console */\n\nimport { CachedAsyncIterable } from \"cached-iterable\";\n\n/**\n * The `Localization` class is a central high-level API for vanilla\n * JavaScript use of Fluent.\n * It combines language negotiation, FluentBundle and I/O to\n * provide a scriptable API to format translations.\n */\nexport default class Localization {\n  /**\n   * @param {Array<String>} resourceIds     - List of resource IDs\n   * @param {Function}      generateBundles - Function that returns a\n   *                                          generator over FluentBundles\n   *\n   * @returns {Localization}\n   */\n  constructor(resourceIds = [], generateBundles) {\n    this.resourceIds = resourceIds;\n    this.generateBundles = generateBundles;\n    this.onChange(true);\n  }\n\n  addResourceIds(resourceIds, eager = false) {\n    this.resourceIds.push(...resourceIds);\n    this.onChange(eager);\n    return this.resourceIds.length;\n  }\n\n  removeResourceIds(resourceIds) {\n    this.resourceIds = this.resourceIds.filter(r => !resourceIds.includes(r));\n    this.onChange();\n    return this.resourceIds.length;\n  }\n\n  /**\n   * Format translations and handle fallback if needed.\n   *\n   * Format translations for `keys` from `FluentBundle` instances on this\n   * DOMLocalization. In case of errors, fetch the next context in the\n   * fallback chain.\n   *\n   * @param   {Array<Object>}         keys    - Translation keys to format.\n   * @param   {Function}              method  - Formatting function.\n   * @returns {Promise<Array<string|Object>>}\n   * @private\n   */\n  async formatWithFallback(keys, method) {\n    const translations = [];\n    let hasAtLeastOneBundle = false;\n\n    for await (const bundle of this.bundles) {\n      hasAtLeastOneBundle = true;\n      const missingIds = keysFromBundle(method, bundle, keys, translations);\n\n      if (missingIds.size === 0) {\n        break;\n      }\n\n      if (typeof console !== \"undefined\") {\n        const locale = bundle.locales[0];\n        const ids = Array.from(missingIds).join(\", \");\n        console.warn(`[fluent] Missing translations in ${locale}: ${ids}`);\n      }\n    }\n\n    if (!hasAtLeastOneBundle && typeof console !== \"undefined\") {\n      // eslint-disable-next-line max-len\n      console.warn(`[fluent] Request for keys failed because no resource bundles got generated.\n  keys: ${JSON.stringify(keys)}.\n  resourceIds: ${JSON.stringify(this.resourceIds)}.`);\n    }\n\n    return translations;\n  }\n\n  /**\n   * Format translations into {value, attributes} objects.\n   *\n   * The fallback logic is the same as in `formatValues` but it returns {value,\n   * attributes} objects which are suitable for the translation of DOM\n   * elements.\n   *\n   *     docL10n.formatMessages([\n   *       {id: 'hello', args: { who: 'Mary' }},\n   *       {id: 'welcome'}\n   *     ]).then(console.log);\n   *\n   *     // [\n   *     //   { value: 'Hello, Mary!', attributes: null },\n   *     //   {\n   *     //     value: 'Welcome!',\n   *     //     attributes: [ { name: \"title\", value: 'Hello' } ]\n   *     //   }\n   *     // ]\n   *\n   * Returns a Promise resolving to an array of the translation strings.\n   *\n   * @param   {Array<Object>} keys\n   * @returns {Promise<Array<{value: string, attributes: Object}>>}\n   * @private\n   */\n  formatMessages(keys) {\n    return this.formatWithFallback(keys, messageFromBundle);\n  }\n\n  /**\n   * Retrieve translations corresponding to the passed keys.\n   *\n   * A generalized version of `DOMLocalization.formatValue`. Keys must\n   * be `{id, args}` objects.\n   *\n   *     docL10n.formatValues([\n   *       {id: 'hello', args: { who: 'Mary' }},\n   *       {id: 'hello', args: { who: 'John' }},\n   *       {id: 'welcome'}\n   *     ]).then(console.log);\n   *\n   *     // ['Hello, Mary!', 'Hello, John!', 'Welcome!']\n   *\n   * Returns a Promise resolving to an array of the translation strings.\n   *\n   * @param   {Array<Object>} keys\n   * @returns {Promise<Array<string>>}\n   */\n  formatValues(keys) {\n    return this.formatWithFallback(keys, valueFromBundle);\n  }\n\n  /**\n   * Retrieve the translation corresponding to the `id` identifier.\n   *\n   * If passed, `args` is a simple hash object with a list of variables that\n   * will be interpolated in the value of the translation.\n   *\n   *     docL10n.formatValue(\n   *       'hello', { who: 'world' }\n   *     ).then(console.log);\n   *\n   *     // 'Hello, world!'\n   *\n   * Returns a Promise resolving to the translation string.\n   *\n   * Use this sparingly for one-off messages which don't need to be\n   * retranslated when the user changes their language preferences, e.g. in\n   * notifications.\n   *\n   * @param   {string}  id     - Identifier of the translation to format\n   * @param   {Object}  [args] - Optional external arguments\n   * @returns {Promise<string>}\n   */\n  async formatValue(id, args) {\n    const [val] = await this.formatValues([{id, args}]);\n    return val;\n  }\n\n  handleEvent() {\n    this.onChange();\n  }\n\n  /**\n   * This method should be called when there's a reason to believe\n   * that language negotiation or available resources changed.\n   */\n  onChange(eager = false) {\n    this.bundles = CachedAsyncIterable.from(\n      this.generateBundles(this.resourceIds));\n    if (eager) {\n      this.bundles.touchNext(2);\n    }\n  }\n}\n\n/**\n * Format the value of a message into a string or `null`.\n *\n * This function is passed as a method to `keysFromBundle` and resolve\n * a value of a single L10n Entity using provided `FluentBundle`.\n *\n * If the message doesn't have a value, return `null`.\n *\n * @param   {FluentBundle} bundle\n * @param   {Array<Error>} errors\n * @param   {Object} message\n * @param   {Object} args\n * @returns {string|null}\n * @private\n */\nfunction valueFromBundle(bundle, errors, message, args) {\n  if (message.value) {\n    return bundle.formatPattern(message.value, args, errors);\n  }\n\n  return null;\n}\n\n/**\n * Format all public values of a message into a {value, attributes} object.\n *\n * This function is passed as a method to `keysFromBundle` and resolve\n * a single L10n Entity using provided `FluentBundle`.\n *\n * The function will return an object with a value and attributes of the\n * entity.\n *\n * @param   {FluentBundle} bundle\n * @param   {Array<Error>} errors\n * @param   {Object} message\n * @param   {Object} args\n * @returns {Object}\n * @private\n */\nfunction messageFromBundle(bundle, errors, message, args) {\n  const formatted = {\n    value: null,\n    attributes: null,\n  };\n\n  if (message.value) {\n    formatted.value = bundle.formatPattern(message.value, args, errors);\n  }\n\n  let attrNames = Object.keys(message.attributes);\n  if (attrNames.length > 0) {\n    formatted.attributes = new Array(attrNames.length);\n    for (let [i, name] of attrNames.entries()) {\n      let value = bundle.formatPattern(message.attributes[name], args, errors);\n      formatted.attributes[i] = {name, value};\n    }\n  }\n\n  return formatted;\n}\n\n/**\n * This function is an inner function for `Localization.formatWithFallback`.\n *\n * It takes a `FluentBundle`, list of l10n-ids and a method to be used for\n * key resolution (either `valueFromBundle` or `messageFromBundle`) and\n * optionally a value returned from `keysFromBundle` executed against\n * another `FluentBundle`.\n *\n * The idea here is that if the previous `FluentBundle` did not resolve\n * all keys, we're calling this function with the next context to resolve\n * the remaining ones.\n *\n * In the function, we loop over `keys` and check if we have the `prev`\n * passed and if it has an error entry for the position we're in.\n *\n * If it doesn't, it means that we have a good translation for this key and\n * we return it. If it does, we'll try to resolve the key using the passed\n * `FluentBundle`.\n *\n * In the end, we fill the translations array, and return the Set with\n * missing ids.\n *\n * See `Localization.formatWithFallback` for more info on how this is used.\n *\n * @param {Function}       method\n * @param {FluentBundle} bundle\n * @param {Array<string>}  keys\n * @param {{Array<{value: string, attributes: Object}>}} translations\n *\n * @returns {Set<string>}\n * @private\n */\nfunction keysFromBundle(method, bundle, keys, translations) {\n  const messageErrors = [];\n  const missingIds = new Set();\n\n  keys.forEach(({id, args}, i) => {\n    if (translations[i] !== undefined) {\n      return;\n    }\n\n    let message = bundle.getMessage(id);\n    if (message) {\n      messageErrors.length = 0;\n      translations[i] = method(bundle, messageErrors, message, args);\n      if (messageErrors.length > 0 && typeof console !== \"undefined\") {\n        const locale = bundle.locales[0];\n        const errors = messageErrors.join(\", \");\n        // eslint-disable-next-line max-len\n        console.warn(`[fluent][resolver] errors in ${locale}/${id}: ${errors}.`);\n      }\n    } else {\n      missingIds.add(id);\n    }\n  });\n\n  return missingIds;\n}\n",
    "static": true,
    "longname": "/c/Users/Stas/Mozilla/fluent/fluent.js/fluent-dom/src/localization.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 83,
    "kind": "class",
    "name": "Localization",
    "memberof": "src/localization.js",
    "static": true,
    "longname": "src/localization.js~Localization",
    "access": "public",
    "export": true,
    "importPath": "@fluent/dom/src/localization.js",
    "importStyle": "Localization",
    "description": "The `Localization` class is a central high-level API for vanilla\nJavaScript use of Fluent.\nIt combines language negotiation, FluentBundle and I/O to\nprovide a scriptable API to format translations.",
    "lineNumber": 12,
    "interface": false
  },
  {
    "__docId__": 84,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/localization.js~Localization",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/localization.js~Localization#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 20,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Localization}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<String>"
        ],
        "spread": false,
        "optional": false,
        "name": "resourceIds",
        "description": "List of resource IDs"
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "generateBundles",
        "description": "Function that returns a\n                                         generator over FluentBundles"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Localization"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 85,
    "kind": "member",
    "name": "resourceIds",
    "memberof": "src/localization.js~Localization",
    "static": false,
    "longname": "src/localization.js~Localization#resourceIds",
    "access": "public",
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 86,
    "kind": "member",
    "name": "generateBundles",
    "memberof": "src/localization.js~Localization",
    "static": false,
    "longname": "src/localization.js~Localization#generateBundles",
    "access": "public",
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 87,
    "kind": "method",
    "name": "addResourceIds",
    "memberof": "src/localization.js~Localization",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/localization.js~Localization#addResourceIds",
    "access": "public",
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "params": [
      {
        "name": "resourceIds",
        "types": [
          "*"
        ]
      },
      {
        "name": "eager",
        "optional": true,
        "types": [
          "boolean"
        ],
        "defaultRaw": false,
        "defaultValue": "false"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 88,
    "kind": "method",
    "name": "removeResourceIds",
    "memberof": "src/localization.js~Localization",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/localization.js~Localization#removeResourceIds",
    "access": "public",
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "params": [
      {
        "name": "resourceIds",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 90,
    "kind": "method",
    "name": "formatWithFallback",
    "memberof": "src/localization.js~Localization",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/localization.js~Localization#formatWithFallback",
    "access": "private",
    "description": "Format translations and handle fallback if needed.\n\nFormat translations for `keys` from `FluentBundle` instances on this\nDOMLocalization. In case of errors, fetch the next context in the\nfallback chain.",
    "lineNumber": 50,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<Array<string|Object>>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<Object>"
        ],
        "spread": false,
        "optional": false,
        "name": "keys",
        "description": "Translation keys to format."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "method",
        "description": "Formatting function."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Array<string|Object>>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 91,
    "kind": "method",
    "name": "formatMessages",
    "memberof": "src/localization.js~Localization",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/localization.js~Localization#formatMessages",
    "access": "private",
    "description": "Format translations into {value, attributes} objects.\n\nThe fallback logic is the same as in `formatValues` but it returns {value,\nattributes} objects which are suitable for the translation of DOM\nelements.\n\n    docL10n.formatMessages([\n      {id: 'hello', args: { who: 'Mary' }},\n      {id: 'welcome'}\n    ]).then(console.log);\n\n    // [\n    //   { value: 'Hello, Mary!', attributes: null },\n    //   {\n    //     value: 'Welcome!',\n    //     attributes: [ { name: \"title\", value: 'Hello' } ]\n    //   }\n    // ]\n\nReturns a Promise resolving to an array of the translation strings.",
    "lineNumber": 105,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<Array<{value: string, attributes: Object}>>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<Object>"
        ],
        "spread": false,
        "optional": false,
        "name": "keys",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Array<{value: string, attributes: Object}>>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 92,
    "kind": "method",
    "name": "formatValues",
    "memberof": "src/localization.js~Localization",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/localization.js~Localization#formatValues",
    "access": "public",
    "description": "Retrieve translations corresponding to the passed keys.\n\nA generalized version of `DOMLocalization.formatValue`. Keys must\nbe `{id, args}` objects.\n\n    docL10n.formatValues([\n      {id: 'hello', args: { who: 'Mary' }},\n      {id: 'hello', args: { who: 'John' }},\n      {id: 'welcome'}\n    ]).then(console.log);\n\n    // ['Hello, Mary!', 'Hello, John!', 'Welcome!']\n\nReturns a Promise resolving to an array of the translation strings.",
    "lineNumber": 128,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<Array<string>>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<Object>"
        ],
        "spread": false,
        "optional": false,
        "name": "keys",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Array<string>>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 93,
    "kind": "method",
    "name": "formatValue",
    "memberof": "src/localization.js~Localization",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/localization.js~Localization#formatValue",
    "access": "public",
    "description": "Retrieve the translation corresponding to the `id` identifier.\n\nIf passed, `args` is a simple hash object with a list of variables that\nwill be interpolated in the value of the translation.\n\n    docL10n.formatValue(\n      'hello', { who: 'world' }\n    ).then(console.log);\n\n    // 'Hello, world!'\n\nReturns a Promise resolving to the translation string.\n\nUse this sparingly for one-off messages which don't need to be\nretranslated when the user changes their language preferences, e.g. in\nnotifications.",
    "lineNumber": 154,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<string>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": "Identifier of the translation to format"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "args",
        "description": "Optional external arguments"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<string>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 94,
    "kind": "method",
    "name": "handleEvent",
    "memberof": "src/localization.js~Localization",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/localization.js~Localization#handleEvent",
    "access": "public",
    "description": null,
    "lineNumber": 159,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 95,
    "kind": "method",
    "name": "onChange",
    "memberof": "src/localization.js~Localization",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/localization.js~Localization#onChange",
    "access": "public",
    "description": "This method should be called when there's a reason to believe\nthat language negotiation or available resources changed.",
    "lineNumber": 167,
    "params": [
      {
        "name": "eager",
        "optional": true,
        "types": [
          "boolean"
        ],
        "defaultRaw": false,
        "defaultValue": "false"
      }
    ],
    "return": null
  },
  {
    "__docId__": 96,
    "kind": "member",
    "name": "bundles",
    "memberof": "src/localization.js~Localization",
    "static": false,
    "longname": "src/localization.js~Localization#bundles",
    "access": "public",
    "description": null,
    "lineNumber": 168,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 97,
    "kind": "function",
    "name": "valueFromBundle",
    "memberof": "src/localization.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/localization.js~valueFromBundle",
    "access": "private",
    "export": false,
    "importPath": "@fluent/dom/src/localization.js",
    "importStyle": null,
    "description": "Format the value of a message into a string or `null`.\n\nThis function is passed as a method to `keysFromBundle` and resolve\na value of a single L10n Entity using provided `FluentBundle`.\n\nIf the message doesn't have a value, return `null`.",
    "lineNumber": 191,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string|null}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "FluentBundle"
        ],
        "spread": false,
        "optional": false,
        "name": "bundle",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Array<Error>"
        ],
        "spread": false,
        "optional": false,
        "name": "errors",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "message",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "args",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string",
        "null"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 98,
    "kind": "function",
    "name": "messageFromBundle",
    "memberof": "src/localization.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/localization.js~messageFromBundle",
    "access": "private",
    "export": false,
    "importPath": "@fluent/dom/src/localization.js",
    "importStyle": null,
    "description": "Format all public values of a message into a {value, attributes} object.\n\nThis function is passed as a method to `keysFromBundle` and resolve\na single L10n Entity using provided `FluentBundle`.\n\nThe function will return an object with a value and attributes of the\nentity.",
    "lineNumber": 215,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "FluentBundle"
        ],
        "spread": false,
        "optional": false,
        "name": "bundle",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Array<Error>"
        ],
        "spread": false,
        "optional": false,
        "name": "errors",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "message",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "args",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 99,
    "kind": "function",
    "name": "keysFromBundle",
    "memberof": "src/localization.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/localization.js~keysFromBundle",
    "access": "private",
    "export": false,
    "importPath": "@fluent/dom/src/localization.js",
    "importStyle": null,
    "description": "This function is an inner function for `Localization.formatWithFallback`.\n\nIt takes a `FluentBundle`, list of l10n-ids and a method to be used for\nkey resolution (either `valueFromBundle` or `messageFromBundle`) and\noptionally a value returned from `keysFromBundle` executed against\nanother `FluentBundle`.\n\nThe idea here is that if the previous `FluentBundle` did not resolve\nall keys, we're calling this function with the next context to resolve\nthe remaining ones.\n\nIn the function, we loop over `keys` and check if we have the `prev`\npassed and if it has an error entry for the position we're in.\n\nIf it doesn't, it means that we have a good translation for this key and\nwe return it. If it does, we'll try to resolve the key using the passed\n`FluentBundle`.\n\nIn the end, we fill the translations array, and return the Set with\nmissing ids.\n\nSee `Localization.formatWithFallback` for more info on how this is used.",
    "lineNumber": 269,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Set<string>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "method",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "FluentBundle"
        ],
        "spread": false,
        "optional": false,
        "name": "bundle",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Array<string>"
        ],
        "spread": false,
        "optional": false,
        "name": "keys",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "{Array<{value: string, attributes: Object}>}"
        ],
        "spread": false,
        "optional": false,
        "name": "translations",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Set<string>"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 100,
    "kind": "file",
    "name": "src/overlay.js",
    "content": "/* eslint no-console: [\"error\", {allow: [\"warn\"]}] */\n/* global console */\n\n// Match the opening angle bracket (<) in HTML tags, and HTML entities like\n// &amp;, &#0038;, &#x0026;.\nconst reOverlay = /<|&#?\\w+;/;\n\n/**\n * Elements allowed in translations even if they are not present in the source\n * HTML. They are text-level elements as defined by the HTML5 spec:\n * https://www.w3.org/TR/html5/text-level-semantics.html with the exception of:\n *\n *   - a - because we don't allow href on it anyways,\n *   - ruby, rt, rp - because we don't allow nested elements to be inserted.\n */\nconst TEXT_LEVEL_ELEMENTS = {\n  \"http://www.w3.org/1999/xhtml\": [\n    \"em\", \"strong\", \"small\", \"s\", \"cite\", \"q\", \"dfn\", \"abbr\", \"data\",\n    \"time\", \"code\", \"var\", \"samp\", \"kbd\", \"sub\", \"sup\", \"i\", \"b\", \"u\",\n    \"mark\", \"bdi\", \"bdo\", \"span\", \"br\", \"wbr\"\n  ],\n};\n\nconst LOCALIZABLE_ATTRIBUTES = {\n  \"http://www.w3.org/1999/xhtml\": {\n    global: [\"title\", \"aria-label\", \"aria-valuetext\"],\n    a: [\"download\"],\n    area: [\"download\", \"alt\"],\n    // value is special-cased in isAttrNameLocalizable\n    input: [\"alt\", \"placeholder\"],\n    menuitem: [\"label\"],\n    menu: [\"label\"],\n    optgroup: [\"label\"],\n    option: [\"label\"],\n    track: [\"label\"],\n    img: [\"alt\"],\n    textarea: [\"placeholder\"],\n    th: [\"abbr\"]\n  },\n  \"http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul\": {\n    global: [\n      \"accesskey\", \"aria-label\", \"aria-valuetext\", \"label\",\n      \"title\", \"tooltiptext\"\n    ],\n    description: [\"value\"],\n    key: [\"key\", \"keycode\"],\n    label: [\"value\"],\n    textbox: [\"placeholder\", \"value\"],\n  }\n};\n\n\n/**\n * Translate an element.\n *\n * Translate the element's text content and attributes. Some HTML markup is\n * allowed in the translation. The element's children with the data-l10n-name\n * attribute will be treated as arguments to the translation. If the\n * translation defines the same children, their attributes and text contents\n * will be used for translating the matching source child.\n *\n * @param   {Element} element\n * @param   {Object} translation\n * @private\n */\nexport default function translateElement(element, translation) {\n  const {value} = translation;\n\n  if (typeof value === \"string\") {\n    if (element.localName === \"title\" &&\n        element.namespaceURI === \"http://www.w3.org/1999/xhtml\") {\n      // A special case for the HTML title element whose content must be text.\n      element.textContent = value;\n    } else if (!reOverlay.test(value)) {\n      // If the translation doesn't contain any markup skip the overlay logic.\n      element.textContent = value;\n    } else {\n      // Else parse the translation's HTML using an inert template element,\n      // sanitize it and replace the element's content.\n      const templateElement = element.ownerDocument.createElementNS(\n        \"http://www.w3.org/1999/xhtml\", \"template\"\n      );\n      templateElement.innerHTML = value;\n      overlayChildNodes(templateElement.content, element);\n    }\n  }\n\n  // Even if the translation doesn't define any localizable attributes, run\n  // overlayAttributes to remove any localizable attributes set by previous\n  // translations.\n  overlayAttributes(translation, element);\n}\n\n/**\n * Replace child nodes of an element with child nodes of another element.\n *\n * The contents of the target element will be cleared and fully replaced with\n * sanitized contents of the source element.\n *\n * @param {DocumentFragment} fromFragment - The source of children to overlay.\n * @param {Element} toElement - The target of the overlay.\n * @private\n */\nfunction overlayChildNodes(fromFragment, toElement) {\n  for (const childNode of fromFragment.childNodes) {\n    if (childNode.nodeType === childNode.TEXT_NODE) {\n      // Keep the translated text node.\n      continue;\n    }\n\n    if (childNode.hasAttribute(\"data-l10n-name\")) {\n      const sanitized = getNodeForNamedElement(toElement, childNode);\n      fromFragment.replaceChild(sanitized, childNode);\n      continue;\n    }\n\n    if (isElementAllowed(childNode)) {\n      const sanitized = createSanitizedElement(childNode);\n      fromFragment.replaceChild(sanitized, childNode);\n      continue;\n    }\n\n    console.warn(\n      `An element of forbidden type \"${childNode.localName}\" was found in ` +\n      \"the translation. Only safe text-level elements and elements with \" +\n      \"data-l10n-name are allowed.\"\n    );\n\n    // If all else fails, replace the element with its text content.\n    fromFragment.replaceChild(\n      createTextNodeFromTextContent(childNode), childNode);\n  }\n\n  toElement.textContent = \"\";\n  toElement.appendChild(fromFragment);\n}\n\nfunction hasAttribute(attributes, name) {\n  if (!attributes) {\n    return false;\n  }\n  for (let attr of attributes) {\n    if (attr.name === name) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * Transplant localizable attributes of an element to another element.\n *\n * Any localizable attributes already set on the target element will be\n * cleared.\n *\n * @param   {Element|Object} fromElement - The source of child nodes to overlay.\n * @param   {Element} toElement - The target of the overlay.\n * @private\n */\nfunction overlayAttributes(fromElement, toElement) {\n  const explicitlyAllowed = toElement.hasAttribute(\"data-l10n-attrs\")\n    ? toElement.getAttribute(\"data-l10n-attrs\")\n      .split(\",\").map(i => i.trim())\n    : null;\n\n  // Remove existing localizable attributes if they\n  // will not be used in the new translation.\n  for (const attr of Array.from(toElement.attributes)) {\n    if (isAttrNameLocalizable(attr.name, toElement, explicitlyAllowed)\n      && !hasAttribute(fromElement.attributes, attr.name)) {\n      toElement.removeAttribute(attr.name);\n    }\n  }\n\n  // fromElement might be a {value, attributes} object as returned by\n  // Localization.messageFromBundle. In which case attributes may be null to\n  // save GC cycles.\n  if (!fromElement.attributes) {\n    return;\n  }\n\n  // Set localizable attributes.\n  for (const attr of Array.from(fromElement.attributes)) {\n    if (isAttrNameLocalizable(attr.name, toElement, explicitlyAllowed)\n      && toElement.getAttribute(attr.name) !== attr.value) {\n      toElement.setAttribute(attr.name, attr.value);\n    }\n  }\n}\n\n/**\n * Sanitize a child element created by the translation.\n *\n * Try to find a corresponding child in sourceElement and use it as the base\n * for the sanitization. This will preserve functional attribtues defined on\n * the child element in the source HTML.\n *\n * @param   {Element} sourceElement - The source for data-l10n-name lookups.\n * @param   {Element} translatedChild - The translated child to be sanitized.\n * @returns {Element}\n * @private\n */\nfunction getNodeForNamedElement(sourceElement, translatedChild) {\n  const childName = translatedChild.getAttribute(\"data-l10n-name\");\n  const sourceChild = sourceElement.querySelector(\n    `[data-l10n-name=\"${childName}\"]`\n  );\n\n  if (!sourceChild) {\n    console.warn(\n      `An element named \"${childName}\" wasn't found in the source.`\n    );\n    return createTextNodeFromTextContent(translatedChild);\n  }\n\n  if (sourceChild.localName !== translatedChild.localName) {\n    console.warn(\n      `An element named \"${childName}\" was found in the translation ` +\n      `but its type ${translatedChild.localName} didn't match the ` +\n      `element found in the source (${sourceChild.localName}).`\n    );\n    return createTextNodeFromTextContent(translatedChild);\n  }\n\n  // Remove it from sourceElement so that the translation cannot use\n  // the same reference name again.\n  sourceElement.removeChild(sourceChild);\n  // We can't currently guarantee that a translation won't remove\n  // sourceChild from the element completely, which could break the app if\n  // it relies on an event handler attached to the sourceChild. Let's make\n  // this limitation explicit for now by breaking the identitiy of the\n  // sourceChild by cloning it. This will destroy all event handlers\n  // attached to sourceChild via addEventListener and via on<name>\n  // properties.\n  const clone = sourceChild.cloneNode(false);\n  return shallowPopulateUsing(translatedChild, clone);\n}\n\n/**\n * Sanitize an allowed element.\n *\n * Text-level elements allowed in translations may only use safe attributes\n * and will have any nested markup stripped to text content.\n *\n * @param   {Element} element - The element to be sanitized.\n * @returns {Element}\n * @private\n */\nfunction createSanitizedElement(element) {\n  // Start with an empty element of the same type to remove nested children\n  // and non-localizable attributes defined by the translation.\n  const clone = element.ownerDocument.createElement(element.localName);\n  return shallowPopulateUsing(element, clone);\n}\n\n/**\n * Convert an element to a text node.\n *\n * @param   {Element} element - The element to be sanitized.\n * @returns {Node}\n * @private\n */\nfunction createTextNodeFromTextContent(element) {\n  return element.ownerDocument.createTextNode(element.textContent);\n}\n\n/**\n * Check if element is allowed in the translation.\n *\n * This method is used by the sanitizer when the translation markup contains\n * an element which is not present in the source code.\n *\n * @param   {Element} element\n * @returns {boolean}\n * @private\n */\nfunction isElementAllowed(element) {\n  const allowed = TEXT_LEVEL_ELEMENTS[element.namespaceURI];\n  return allowed && allowed.includes(element.localName);\n}\n\n/**\n * Check if attribute is allowed for the given element.\n *\n * This method is used by the sanitizer when the translation markup contains\n * DOM attributes, or when the translation has traits which map to DOM\n * attributes.\n *\n * `explicitlyAllowed` can be passed as a list of attributes explicitly\n * allowed on this element.\n *\n * @param   {string}         name\n * @param   {Element}        element\n * @param   {Array}          explicitlyAllowed\n * @returns {boolean}\n * @private\n */\nfunction isAttrNameLocalizable(name, element, explicitlyAllowed = null) {\n  if (explicitlyAllowed && explicitlyAllowed.includes(name)) {\n    return true;\n  }\n\n  const allowed = LOCALIZABLE_ATTRIBUTES[element.namespaceURI];\n  if (!allowed) {\n    return false;\n  }\n\n  const attrName = name.toLowerCase();\n  const elemName = element.localName;\n\n  // Is it a globally safe attribute?\n  if (allowed.global.includes(attrName)) {\n    return true;\n  }\n\n  // Are there no allowed attributes for this element?\n  if (!allowed[elemName]) {\n    return false;\n  }\n\n  // Is it allowed on this element?\n  if (allowed[elemName].includes(attrName)) {\n    return true;\n  }\n\n  // Special case for value on HTML inputs with type button, reset, submit\n  if (element.namespaceURI === \"http://www.w3.org/1999/xhtml\" &&\n      elemName === \"input\" && attrName === \"value\") {\n    const type = element.type.toLowerCase();\n    if (type === \"submit\" || type === \"button\" || type === \"reset\") {\n      return true;\n    }\n  }\n\n  return false;\n}\n\n/**\n * Helper to set textContent and localizable attributes on an element.\n *\n * @param   {Element} fromElement\n * @param   {Element} toElement\n * @returns {Element}\n * @private\n */\nfunction shallowPopulateUsing(fromElement, toElement) {\n  toElement.textContent = fromElement.textContent;\n  overlayAttributes(fromElement, toElement);\n  return toElement;\n}\n",
    "static": true,
    "longname": "/c/Users/Stas/Mozilla/fluent/fluent.js/fluent-dom/src/overlay.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 101,
    "kind": "variable",
    "name": "reOverlay",
    "memberof": "src/overlay.js",
    "static": true,
    "longname": "src/overlay.js~reOverlay",
    "access": "public",
    "export": false,
    "importPath": "@fluent/dom/src/overlay.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "undefined"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 102,
    "kind": "variable",
    "name": "TEXT_LEVEL_ELEMENTS",
    "memberof": "src/overlay.js",
    "static": true,
    "longname": "src/overlay.js~TEXT_LEVEL_ELEMENTS",
    "access": "public",
    "export": false,
    "importPath": "@fluent/dom/src/overlay.js",
    "importStyle": null,
    "description": "Elements allowed in translations even if they are not present in the source\nHTML. They are text-level elements as defined by the HTML5 spec:\nhttps://www.w3.org/TR/html5/text-level-semantics.html with the exception of:\n\n  - a - because we don't allow href on it anyways,\n  - ruby, rt, rp - because we don't allow nested elements to be inserted.",
    "lineNumber": 16,
    "type": {
      "types": [
        "{\"http://www.w3.org/1999/xhtml\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 103,
    "kind": "variable",
    "name": "LOCALIZABLE_ATTRIBUTES",
    "memberof": "src/overlay.js",
    "static": true,
    "longname": "src/overlay.js~LOCALIZABLE_ATTRIBUTES",
    "access": "public",
    "export": false,
    "importPath": "@fluent/dom/src/overlay.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "type": {
      "types": [
        "{\"http://www.w3.org/1999/xhtml\": *, \"http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 104,
    "kind": "function",
    "name": "translateElement",
    "memberof": "src/overlay.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/overlay.js~translateElement",
    "access": "private",
    "export": true,
    "importPath": "@fluent/dom/src/overlay.js",
    "importStyle": "translateElement",
    "description": "Translate an element.\n\nTranslate the element's text content and attributes. Some HTML markup is\nallowed in the translation. The element's children with the data-l10n-name\nattribute will be treated as arguments to the translation. If the\ntranslation defines the same children, their attributes and text contents\nwill be used for translating the matching source child.",
    "lineNumber": 66,
    "params": [
      {
        "nullable": null,
        "types": [
          "Element"
        ],
        "spread": false,
        "optional": false,
        "name": "element",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "translation",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 105,
    "kind": "function",
    "name": "overlayChildNodes",
    "memberof": "src/overlay.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/overlay.js~overlayChildNodes",
    "access": "private",
    "export": false,
    "importPath": "@fluent/dom/src/overlay.js",
    "importStyle": null,
    "description": "Replace child nodes of an element with child nodes of another element.\n\nThe contents of the target element will be cleared and fully replaced with\nsanitized contents of the source element.",
    "lineNumber": 104,
    "params": [
      {
        "nullable": null,
        "types": [
          "DocumentFragment"
        ],
        "spread": false,
        "optional": false,
        "name": "fromFragment",
        "description": "The source of children to overlay."
      },
      {
        "nullable": null,
        "types": [
          "Element"
        ],
        "spread": false,
        "optional": false,
        "name": "toElement",
        "description": "The target of the overlay."
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 106,
    "kind": "function",
    "name": "hasAttribute",
    "memberof": "src/overlay.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/overlay.js~hasAttribute",
    "access": "public",
    "export": false,
    "importPath": "@fluent/dom/src/overlay.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 138,
    "undocument": true,
    "params": [
      {
        "name": "attributes",
        "types": [
          "*"
        ]
      },
      {
        "name": "name",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 107,
    "kind": "function",
    "name": "overlayAttributes",
    "memberof": "src/overlay.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/overlay.js~overlayAttributes",
    "access": "private",
    "export": false,
    "importPath": "@fluent/dom/src/overlay.js",
    "importStyle": null,
    "description": "Transplant localizable attributes of an element to another element.\n\nAny localizable attributes already set on the target element will be\ncleared.",
    "lineNumber": 160,
    "params": [
      {
        "nullable": null,
        "types": [
          "Element",
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "fromElement",
        "description": "The source of child nodes to overlay."
      },
      {
        "nullable": null,
        "types": [
          "Element"
        ],
        "spread": false,
        "optional": false,
        "name": "toElement",
        "description": "The target of the overlay."
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 108,
    "kind": "function",
    "name": "getNodeForNamedElement",
    "memberof": "src/overlay.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/overlay.js~getNodeForNamedElement",
    "access": "private",
    "export": false,
    "importPath": "@fluent/dom/src/overlay.js",
    "importStyle": null,
    "description": "Sanitize a child element created by the translation.\n\nTry to find a corresponding child in sourceElement and use it as the base\nfor the sanitization. This will preserve functional attribtues defined on\nthe child element in the source HTML.",
    "lineNumber": 203,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Element}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Element"
        ],
        "spread": false,
        "optional": false,
        "name": "sourceElement",
        "description": "The source for data-l10n-name lookups."
      },
      {
        "nullable": null,
        "types": [
          "Element"
        ],
        "spread": false,
        "optional": false,
        "name": "translatedChild",
        "description": "The translated child to be sanitized."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Element"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 109,
    "kind": "function",
    "name": "createSanitizedElement",
    "memberof": "src/overlay.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/overlay.js~createSanitizedElement",
    "access": "private",
    "export": false,
    "importPath": "@fluent/dom/src/overlay.js",
    "importStyle": null,
    "description": "Sanitize an allowed element.\n\nText-level elements allowed in translations may only use safe attributes\nand will have any nested markup stripped to text content.",
    "lineNumber": 249,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Element}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Element"
        ],
        "spread": false,
        "optional": false,
        "name": "element",
        "description": "The element to be sanitized."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Element"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 110,
    "kind": "function",
    "name": "createTextNodeFromTextContent",
    "memberof": "src/overlay.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/overlay.js~createTextNodeFromTextContent",
    "access": "private",
    "export": false,
    "importPath": "@fluent/dom/src/overlay.js",
    "importStyle": null,
    "description": "Convert an element to a text node.",
    "lineNumber": 263,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Node}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Element"
        ],
        "spread": false,
        "optional": false,
        "name": "element",
        "description": "The element to be sanitized."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Node"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 111,
    "kind": "function",
    "name": "isElementAllowed",
    "memberof": "src/overlay.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/overlay.js~isElementAllowed",
    "access": "private",
    "export": false,
    "importPath": "@fluent/dom/src/overlay.js",
    "importStyle": null,
    "description": "Check if element is allowed in the translation.\n\nThis method is used by the sanitizer when the translation markup contains\nan element which is not present in the source code.",
    "lineNumber": 277,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Element"
        ],
        "spread": false,
        "optional": false,
        "name": "element",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 112,
    "kind": "function",
    "name": "isAttrNameLocalizable",
    "memberof": "src/overlay.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/overlay.js~isAttrNameLocalizable",
    "access": "private",
    "export": false,
    "importPath": "@fluent/dom/src/overlay.js",
    "importStyle": null,
    "description": "Check if attribute is allowed for the given element.\n\nThis method is used by the sanitizer when the translation markup contains\nDOM attributes, or when the translation has traits which map to DOM\nattributes.\n\n`explicitlyAllowed` can be passed as a list of attributes explicitly\nallowed on this element.",
    "lineNumber": 298,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Element"
        ],
        "spread": false,
        "optional": false,
        "name": "element",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "explicitlyAllowed",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 113,
    "kind": "function",
    "name": "shallowPopulateUsing",
    "memberof": "src/overlay.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/overlay.js~shallowPopulateUsing",
    "access": "private",
    "export": false,
    "importPath": "@fluent/dom/src/overlay.js",
    "importStyle": null,
    "description": "Helper to set textContent and localizable attributes on an element.",
    "lineNumber": 346,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Element}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Element"
        ],
        "spread": false,
        "optional": false,
        "name": "fromElement",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Element"
        ],
        "spread": false,
        "optional": false,
        "name": "toElement",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Element"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "kind": "index",
    "content": "# @fluent/dom\n\n`@fluent/dom` provides DOM bindings for Project Fluent, a localization\nframework designed to unleash the expressive power of the natural language.\n\n## Installation\n\n`@fluent/dom` can be used both on the client-side and the server-side.  You\ncan install it from the npm registry or use it as a standalone script (as the\n`FluentDOM` global).\n\n    npm install @fluent/dom\n\n\n## How to use\n\nThe `DOMLocalization` constructor provides the core functionality of\nfull-fallback ready message formatting. It uses a lazy-resolved\n`FluentBundle` objects from the `@fluent/bundle` package to format messages.\n\nOn top of that, `DOMLocalization` can localize any DOMFragment by\nidentifying localizable elements with `data-l10n-id` and translating them.\n\n```javascript\nimport { DOMLocalization } from '@fluent/dom'\n\nconst l10n = new DOMLocalization(MutationObserver, [\n  '/browser/main.ftl',\n  '/toolkit/menu.ftl'\n], generateBundles);\n\nl10n.connectRoot(document.documentElement);\n\nl10n.translateDocument();\n\nconst h1 = document.querySelector('h1');\n\n// Sets `data-l10n-id` and `data-l10n-args` which triggers\n// the `MutationObserver` from `DOMLocalization` and translates the\n// element.\nl10n.setAttributes(h1, 'welcome', { user: 'Anna' });\n```\n\nFor imperative uses straight from the JS code, there's also a `Localization`\nclass that provides just the API needed to format messages in the running code.\n\n```javascript\nimport { Localization } from '@fluent/dom'\n\nfunction *generateBundles() {\n  // Some lazy logic for yielding FluentBundles.\n  yield *[bundle1, bundle2];\n}\n\nconst l10n = new Localization(document, [\n  '/browser/main.ftl',\n  '/toolkit/menu.ftl'\n], generateBundles);\n\nasync function main() {\n  const msg = await l10n.formatValue('welcome', { name: 'Anna' });\n  // → 'Welcome, Anna!'\n}\n```\n\n## Learn more\n\nFind out more about Project Fluent at [projectfluent.org][], including\ndocumentation of the Fluent file format ([FTL][]), links to other packages and\nimplementations, and information about how to get involved.\n\n\n[projectfluent.org]: https://projectfluent.org\n[FTL]: https://projectfluent.org/fluent/guide/\n",
    "longname": "/c/Users/Stas/Mozilla/fluent/fluent.js/fluent-dom/README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "packageJSON",
    "content": "{\n  \"name\": \"@fluent/dom\",\n  \"version\": \"0.6.0\",\n  \"description\": \"Fluent bindings for DOM\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/projectfluent/fluent.js.git\"\n  },\n  \"author\": \"Mozilla <l10n-drivers@mozilla.org>\",\n  \"license\": \"Apache-2.0\",\n  \"contributors\": [\n    {\n      \"name\": \"Zibi Braniecki\",\n      \"email\": \"zbraniecki@mozilla.com\"\n    },\n    {\n      \"name\": \"Staś Małolepszy\",\n      \"email\": \"stas@mozilla.com\"\n    }\n  ],\n  \"directories\": {\n    \"lib\": \"./src\"\n  },\n  \"main\": \"./index.js\",\n  \"module\": \"./src/index.js\",\n  \"keywords\": [\n    \"localization\",\n    \"l10n\",\n    \"internationalization\",\n    \"i18n\",\n    \"locale\",\n    \"language\",\n    \"formatting\",\n    \"translate\",\n    \"translation\",\n    \"format\"\n  ],\n  \"engines\": {\n    \"node\": \">=10.0.0\"\n  },\n  \"devDependencies\": {\n    \"@fluent/bundle\": \"^0.14.0\",\n    \"jsdom\": \"^15.1.0\"\n  },\n  \"dependencies\": {\n    \"cached-iterable\": \"^0.3\"\n  }\n}\n",
    "longname": "/c/Users/Stas/Mozilla/fluent/fluent.js/fluent-dom/package.json",
    "name": "package.json",
    "static": true,
    "access": "public"
  }
]